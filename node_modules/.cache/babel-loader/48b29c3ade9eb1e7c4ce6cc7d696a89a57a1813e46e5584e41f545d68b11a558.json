{"ast":null,"code":"var _jsxFileName = \"E:\\\\Development\\\\PIAIC\\\\hr-appf-rontend\\\\hr-app\\\\src\\\\HrProjects.jsx\",\n  _s = $RefreshSig$();\n// // import React from 'react';\n// // import 'bootstrap/dist/css/bootstrap.css'; // Import Bootstrap CSS\n\n// // const Projects = () => {\n// //   return (\n// //     <div className=\"container\">\n// //       <h1>Team Leads</h1>\n// //       <div className=\"row\">\n// //         <div className=\"col-md-6\">\n// //           <p>This is a column with Bootstrap classes.</p>\n// //         </div>\n// //         <div className=\"col-md-6\">\n// //           <p>Another column with Bootstrap classes.</p>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default Projects;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import 'bootstrap/dist/css/bootstrap.css';\n\n// // const Projects = () => {\n// //   const [leads, setLeads] = useState([]);\n// //   const [newLead, setNewLead] = useState({ name: '', email: '' });\n// //   const [selectedLead, setSelectedLead] = useState(null);\n// //   const [editLead, setEditLead] = useState({});\n\n// //   useEffect(() => {\n// //     fetchLeads();\n// //   }, []);\n\n// //   const fetchLeads = async () => {\n// //     try {\n// //       const response = await axios.get('/api/Projects');\n// //       setLeads(response.data);\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const createLead = async () => {\n// //     try {\n// //       await axios.post('/api/Projects', newLead);\n// //       fetchLeads();\n// //       setNewLead({ name: '', email: '' });\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const updateLead = async () => {\n// //     try {\n// //       await axios.put(`/api/Projects/${selectedLead.id}`, editLead);\n// //       fetchLeads();\n// //       setSelectedLead(null);\n// //       setEditLead({});\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const deleteLead = async (leadId) => {\n// //     try {\n// //       await axios.delete(`/api/Projects/${leadId}`);\n// //       fetchLeads();\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     setNewLead({ ...newLead, [e.target.name]: e.target.value });\n// //   };\n\n// //   const handleEditInputChange = (e) => {\n// //     setEditLead({ ...editLead, [e.target.name]: e.target.value });\n// //   };\n\n// //   const selectLead = (lead) => {\n// //     setSelectedLead(lead);\n// //     setEditLead(lead);\n// //   };\n\n// //   return (\n// //     <div className=\"container\">\n// //       <h1>Projects</h1>\n// //       <div className=\"mb-3\">\n// //         <label htmlFor=\"nameInput\" className=\"form-label\">Name:</label>\n// //         <input type=\"text\" className=\"form-control\" id=\"nameInput\" name=\"name\" value={newLead.name} onChange={handleInputChange} />\n// //       </div>\n// //       <div className=\"mb-3\">\n// //         <label htmlFor=\"emailInput\" className=\"form-label\">Email:</label>\n// //         <input type=\"email\" className=\"form-control\" id=\"emailInput\" name=\"email\" value={newLead.email} onChange={handleInputChange} />\n// //       </div>\n// //       <button className=\"btn btn-primary mb-3\" onClick={createLead}>Add Lead</button>\n// //       <table className=\"table table-striped\">\n// //         <thead>\n// //           <tr>\n// //             <th>Name</th>\n// //             <th>Email</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {leads.map((lead) => (\n// //             <tr key={lead.id}>\n// //               <td>{lead.name}</td>\n// //               <td>{lead.email}</td>\n// //               <td>\n// //                 <button className=\"btn btn-sm btn-primary me-2\" onClick={() => selectLead(lead)}>Edit</button>\n// //                 <button className=\"btn btn-sm btn-danger\" onClick={() => deleteLead(lead.id)}>Delete</button>\n// //              </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //       {selectedLead && (\n// //         <div>\n// //           <h3>Edit Lead</h3>\n// //           <div className=\"mb-3\">\n// //             <label htmlFor=\"editNameInput\" className=\"form-label\">Name:</label>\n// //             <input type=\"text\" className=\"form-control\" id=\"editNameInput\" name=\"name\" value={editLead.name} onChange={handleEditInputChange} />\n// //           </div>\n// //           <div className=\"mb-3\">\n// //             <label htmlFor=\"editEmailInput\" className=\"form-label\">Email:</label>\n// //             <input type=\"email\" className=\"form-control\" id=\"editEmailInput\" name=\"email\" value={editLead.email} onChange={handleEditInputChange} />\n// //           </div>\n// //           <button className=\"btn btn-primary me-2\" onClick={updateLead}>Save</button>\n// //           <button className=\"btn btn-secondary\" onClick={() => setSelectedLead(null)}>Cancel</button>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default Projects;\n// // Projects.jsx\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { toast } from 'react-toastify';\n\n// // const Projects = () => {\n// //   const [teamLeads, setTeamLeads] = useState([]);\n// //   const [projects, setProjects] = useState([]);\n// //   const [selectedProject, setSelectedProject] = useState('');\n// //   const [selectedLead, setSelectedLead] = useState('');\n// //   const [newProject, setNewProject] = useState({ projectname: '', developername: '' });\n\n// //   useEffect(() => {\n// //     fetchTeamLeads();\n// //     fetchProjects();\n// //   }, []);\n\n// //   const fetchTeamLeads = async () => {\n// //     try {\n// //       axios.defaults.baseURL = 'http://localhost:5000';\n// //       const response = await axios.get('/api/teamleads');\n// //       setTeamLeads(response.data);\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const fetchProjects = async () => {\n// //     try {\n// //       axios.defaults.baseURL = `http://localhost:5000`;\n// //       const response = await axios.get(`/api/projects`);\n// //       setProjects(response.data);\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     setNewProject({ ...newProject, [e.target.name]: e.target.value });\n// //   };\n\n// //   const handleSelectChange = (e) => {\n// //     setSelectedLead(e.target.value);\n// //   };\n\n// //   const createProject = async () => {\n// //     try {\n// //       const { projectname, developername } = newProject;\n// //       axios.defaults.baseURL = 'http://localhost:5000';\n// //       const response = await axios.post('/api/projects', { projectname, developername, teamLeadId: selectedLead });\n// //       fetchProjects();\n// //       setNewProject({ projectname: '', developername: '' });\n\n// //       if (response.status === 201) {\n// //         toast.success('Project added successfully', {\n// //           position: 'top-right',\n// //           autoClose: 3000,\n// //           hideProgressBar: false,\n// //           closeOnClick: true,\n// //           pauseOnHover: true,\n// //           draggable: true,\n// //         });\n// //       } else {\n// //         toast.error('Failed to add project', {\n// //           position: 'top-right',\n// //           autoClose: 3000,\n// //           hideProgressBar: false,\n// //           closeOnClick: true,\n// //           pauseOnHover: true,\n// //           draggable: true,\n// //         });\n// //       }\n// //     } catch (error) {\n// //       console.error(error);\n// //       toast.error('Failed to add project', {\n// //         position: 'top-right',\n// //         autoClose: 3000,\n// //         hideProgressBar: false,\n// //         closeOnClick: true,\n// //         pauseOnHover: true,\n// //         draggable: true,\n// //       });\n// //     }\n// //   };\n\n// //   const updateProject = async (id) => {\n// //     const updateProject = async (id) => {\n// //       try {\n// //         const projectToUpdate = projects.find((project) => project.id === id);\n// //         if (!projectToUpdate) {\n// //           toast.error('Project not found', {\n// //             position: 'top-right',\n// //             autoClose: 3000,\n// //             hideProgressBar: false,\n// //             closeOnClick: true,\n// //             pauseOnHover: true,\n// //             draggable: true,\n// //           });\n// //           return;\n// //         }\n\n// //         // Implement the logic to update the project here\n// //         const updatedProject = { ...projectToUpdate, projectName: 'Updated Project Name', developerName: 'Updated Developer Name' };\n// //         axios.defaults.baseURL = 'http://localhost:5000';\n// //         const response = await axios.put(`/api/projects/${id}`, updatedProject);\n// //         if (response.status === 200) {\n// //           toast.success('Project updated successfully', {\n// //             position: 'top-right',\n// //             autoClose: 3000,\n// //             hideProgressBar: false,\n// //             closeOnClick: true,\n// //             pauseOnHover: true,\n// //             draggable: true,\n// //           });\n// //           fetchProjects(); // Refresh the projects list after successful update\n// //         } else {\n// //           toast.error('Failed to update project', {\n// //             position: 'top-right',\n// //             autoClose: 3000,\n// //             hideProgressBar: false,\n// //             closeOnClick: true,\n// //             pauseOnHover: true,\n// //             draggable: true,\n// //           });\n// //         }\n// //       } catch (error) {\n// //         console.error(error);\n// //         toast.error('Failed to update project', {\n// //           position: 'top-right',\n// //           autoClose: 3000,\n// //           hideProgressBar: false,\n// //           closeOnClick: true,\n// //           pauseOnHover: true,\n// //           draggable: true,\n// //         });\n// //       }\n// //     };\n\n// //   };\n// //   const getProjectById = async () => {\n// //     try {\n// //       const response = await axios.get(`/api/projects/${selectedProject}`);\n// //       console.log(response.data); // Log the project data fetched by ID\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const deleteProject = async (id) => {\n// //     //const deleteProject = async (id) => {\n// //       try {\n// //         // Implement the logic to delete the project here\n// //         axios.defaults.baseURL = 'http://localhost:5000';\n// //         const response = await axios.delete(`/api/projects/${id}`);\n// //         if (response.status === 200) {\n// //           toast.success('Project deleted successfully', {\n// //             position: 'top-right',\n// //             autoClose: 3000,\n// //             hideProgressBar: false,\n// //             closeOnClick: true,\n// //             pauseOnHover: true,\n// //             draggable: true,\n// //           });\n// //           fetchProjects(); // Refresh the projects list after successful delete\n// //         } else {\n// //           toast.error('Failed to delete project', {\n// //             position: 'top-right',\n// //             autoClose: 3000,\n// //             hideProgressBar: false,\n// //             closeOnClick: true,\n// //             pauseOnHover: true,\n// //             draggable: true,\n// //           });\n// //         }\n// //       } catch (error) {\n// //         console.error(error);\n// //         toast.error('Failed to delete project', {\n// //           position: 'top-right',\n// //           autoClose: 3000,\n// //           hideProgressBar: false,\n// //           closeOnClick: true,\n// //           pauseOnHover: true,\n// //           draggable: true,\n// //         });\n// //       }\n// //    // };\n\n// //   };\n\n// //   return (\n// //     <div className=\"container\">\n// //       <h1>Projects</h1>\n// //       <div className=\"mb-3\">\n// //         <label htmlFor=\"leadSelect\" className=\"form-label\">Select Team Lead:</label>\n// //         <select className=\"form-select\" id=\"leadSelect\" value={selectedLead} onChange={handleSelectChange}>\n// //           <option value=\"\">-- Select Team Lead --</option>\n// //           {teamLeads.map((lead) => (\n// //             <option key={lead.id} value={lead.id}>{lead.name}</option>\n// //           ))}\n// //         </select>\n// //       </div>\n// //       <div className=\"mb-3\">\n// //         <label htmlFor=\"projectNameInput\" className=\"form-label\">Project Name:</label>\n// //         <input type=\"text\" className=\"form-control\" id=\"projectNameInput\" name=\"projectname\" value={newProject.projectname} onChange={handleInputChange} />\n// //       </div>\n// //       <div className=\"mb-3\">\n// //         <label htmlFor=\"developerNameInput\" className=\"form-label\">Developer Name:</label>\n// //         <input type=\"text\" className=\"form-control\" id=\"developerNameInput\" name=\"developername\" value={newProject.developername} onChange={handleInputChange} />\n// //       </div>\n// //       <button className=\"btn btn-primary\" onClick={createProject}>Add Project</button>\n\n// //       <h2>Projects List</h2>\n// //       {/* <table className=\"table\">\n// //         <thead>\n// //           <tr>\n// //             <th>Project Name</th>\n// //             <th>Developer Name</th>\n// //             <th>Team Lead</th>\n// //             <th>Edit</th>\n// //             <th>Delete</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {projects.map((project) => (\n// //             <tr key={project.id}>\n// //               <td>{project.projectName}</td>\n// //               <td>{project.developerName}</td>\n// //               <td>{project.teamLead.name}</td>\n// //               <td>\n// //                 <button className=\"btn btn-sm btn-primary\" onClick={() => updateProject(project.id)}>Edit</button>\n// //               </td>\n// //               <td>\n// //                 <button className=\"btn btn-sm btn-danger\" onClick={() => deleteProject(project.id)}>Delete</button>\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table> */}\n// //       <table className=\"table\">\n// //         <thead>\n// //           <tr>\n// //             <th>Project Name</th>\n// //             <th>Developer Name</th>\n// //             <th>Team Lead</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {projects.map((project) => (\n// //             <tr key={project.id}>\n// //               <td>{project.projectname}</td>\n// //               <td>{project.developername}</td>\n// //               <td>\n// //               {/* {project.teamLead ? project.teamLead.name : 'N/A'} */}\n// //               {teamLeads.find((lead) => lead.id === project.teamLeadId)?.name || 'N/A'}\n// //               </td> //Use optional chaining to avoid undefined error\n// //               <td>\n// //                 <button className=\"btn btn-primary btn-sm\" onClick={() => updateProject(project.id)}>\n// //                   Edit\n// //                 </button>\n// //                 <button className=\"btn btn-danger btn-sm\" onClick={() => deleteProject(project.id)}>\n// //                   Delete\n// //                 </button>\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default Projects;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n\n// const Projects = () => {\n//   const [teamLeads, setTeamLeads] = useState([]);\n//   const [projects, setProjects] = useState([]);\n//   const [selectedProject, setSelectedProject] = useState('');\n//   const [updateProjectData, setUpdateProjectData] = useState({ projectname: '', developername: '' });\n\n//   const [selectedLead, setSelectedLead] = useState('');\n//   const [newProject, setNewProject] = useState({ projectname: '', developername: '' });\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [totalPages, setTotalPages] = useState(1);\n\n//   useEffect(() => {\n//     fetchTeamLeads();\n//     fetchProjects(currentPage);\n//   }, [currentPage]); // Fetch projects whenever the current page changes\n\n//   const fetchTeamLeads = async () => {\n//     try {\n//       axios.defaults.baseURL = 'http://localhost:5000';\n//       const response = await axios.get('/api/teamleads');\n//       setTeamLeads(response.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const fetchProjects = async (page) => {\n//     try {\n//       axios.defaults.baseURL = `http://localhost:5000`;\n//       const response = await axios.get(`/api/projects?page=${page}&itemsPerPage=10`);\n//       setProjects(response.data.projects);\n//       setTotalPages(response.data.totalPages);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     setNewProject({ ...newProject, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSelectChange = (e) => {\n//     setSelectedLead(e.target.value);\n//   };\n\n//   const createProject = async () => {\n//     try {\n//       const { projectname, developername } = newProject;\n//       axios.defaults.baseURL = 'http://localhost:5000';\n//       const response = await axios.post('/api/projects', { projectname, developername, teamleadname: selectedLead });\n//       fetchProjects(currentPage);\n//       setNewProject({ projectname: '', developername: '',teamLeadId: selectedLead });\n\n//       if (response.status === 201) {\n//         toast.success('Project added successfully', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//       } else {\n//         toast.error('Failed to add project', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       toast.error('Failed to add project', {\n//         position: 'top-right',\n//         autoClose: 3000,\n//         hideProgressBar: false,\n//         closeOnClick: true,\n//         pauseOnHover: true,\n//         draggable: true,\n//       });\n//     }\n//   };\n\n//   // const updateProject = async (id) => {\n//   //   try {\n//   //     const projectToUpdate = projects.find((project) => project.id === id);\n//   //     if (!projectToUpdate) {\n//   //       toast.error('Project not found', {\n//   //         position: 'top-right',\n//   //         autoClose: 3000,\n//   //         hideProgressBar: false,\n//   //         closeOnClick: true,\n//   //         pauseOnHover: true,\n//   //         draggable: true,\n//   //       });\n//   //       return;\n//   //     }\n\n//   //     // Implement the logic to update the project here\n//   //     // const updatedProject = { ...projectToUpdate, projectname: 'Updated Project Name', developername: 'Updated Developer Name' };\n\n//   //     axios.defaults.baseURL = 'http://localhost:5000';\n//   //     const response = await axios.put(`/api/projects/${id}`, updatedProject);\n//   //     if (response.status === 200) {\n//   //       toast.success('Project updated successfully', {\n//   //         position: 'top-right',\n//   //         autoClose: 3000,\n//   //         hideProgressBar: false,\n//   //         closeOnClick: true,\n//   //         pauseOnHover: true,\n//   //         draggable: true,\n//   //       });\n//   //       fetchProjects(currentPage); // Refresh the projects list after successful update\n//   //     } else {\n//   //       toast.error('Failed to update project', {\n//   //         position: 'top-right',\n//   //         autoClose: 3000,\n//   //         hideProgressBar: false,\n//   //         closeOnClick: true,\n//   //         pauseOnHover: true,\n//   //         draggable: true,\n//   //       });\n//   //     }\n//   //   } catch (error) {\n//   //     console.error(error);\n//   //     toast.error('Failed to update project', {\n//   //       position: 'top-right',\n//   //       autoClose: 3000,\n//   //       hideProgressBar: false,\n//   //       closeOnClick: true,\n//   //       pauseOnHover: true,\n//   //       draggable: true,\n//   //     });\n//   //   }\n//   // };\n\n//   const updateProject = async (id) => {\n//     try {\n//       const projectToUpdate = projects.find((project) => project.id === id);\n//       if (!projectToUpdate) {\n//         toast.error('Project not found', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//         return;\n//       }\n\n//       // Set the updateProjectData state with the properties of the project to be updated\n//       setUpdateProjectData({\n//         projectname: projectToUpdate.projectname,\n//         developername: projectToUpdate.developername,\n//       });\n\n//       // Implement the logic to update the project here\n//       axios.defaults.baseURL = 'http://localhost:5000';\n//       const response = await axios.put(`/api/projects/${id}`, updateProjectData);\n\n//       if (response.status === 200) {\n//         toast.success('Project updated successfully', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//         fetchProjects(currentPage); // Refresh the projects list after successful update\n//       } else {\n//         toast.error('Failed to update project', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       toast.error('Failed to update project', {\n//         position: 'top-right',\n//         autoClose: 3000,\n//         hideProgressBar: false,\n//         closeOnClick: true,\n//         pauseOnHover: true,\n//         draggable: true,\n//       });\n//     }\n//   };\n\n//   const getProjectById = async () => {\n//     try {\n//       const response = await axios.get(`/api/projects/${selectedProject}`);\n//       console.log(response.data); // Log the project data fetched by ID\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const deleteProject = async (id) => {\n//     try {\n//       // Implement the logic to delete the project here\n//       axios.defaults.baseURL = 'http://localhost:5000';\n//       const response = await axios.delete(`/api/projects/${id}`);\n//       if (response.status === 200) {\n//         toast.success('Project deleted successfully', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//         fetchProjects(currentPage); // Refresh the projects list after successful delete\n//       } else {\n//         toast.error('Failed to delete project', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       toast.error('Failed to delete project', {\n//         position: 'top-right',\n//         autoClose: 3000,\n//         hideProgressBar: false,\n//         closeOnClick: true,\n//         pauseOnHover: true,\n//         draggable: true,\n//       });\n//     }\n//   };\n\n//   const handlePrevPage = () => {\n//     if (currentPage > 1) {\n//       setCurrentPage((prevPage) => prevPage - 1);\n//     }\n//   };\n\n//   const handleNextPage = () => {\n//     if (currentPage < totalPages) {\n//       setCurrentPage((prevPage) => prevPage + 1);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Projects</h1>\n//       <div className=\"mb-3\">\n//         <label htmlFor=\"leadSelect\" className=\"form-label\">Select Team Lead:</label>\n//         <select className=\"form-select\" id=\"leadSelect\" value={selectedLead} onChange={handleSelectChange}>\n//           <option value=\"\">-- Select Team Lead --</option>\n//           {teamLeads.map((lead) => (\n//             <option key={lead.id} value={lead.id}>{lead.name}</option>\n//           ))}\n//         </select>\n//       </div>\n//       <div className=\"mb-3\">\n//         <label htmlFor=\"projectNameInput\" className=\"form-label\">Project Name:</label>\n//         <input type=\"text\" className=\"form-control\" id=\"projectNameInput\" name=\"projectname\" value={newProject.projectname} onChange={handleInputChange} />\n//       </div>\n//       <div className=\"mb-3\">\n//         <label htmlFor=\"developerNameInput\" className=\"form-label\">Developer Name:</label>\n//         <input type=\"text\" className=\"form-control\" id=\"developerNameInput\" name=\"developername\" value={newProject.developername} onChange={handleInputChange} />\n//       </div>\n//       <button className=\"btn btn-primary\" onClick={createProject}>Add Project</button>\n\n//       <h2>Projects List</h2>\n//       <table className=\"table\">\n//         <thead>\n//           <tr>\n//             <th>Project Name</th>\n//             <th>Developer Name</th>\n//             <th>Team Lead</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {projects.map((project) => (\n//             <tr key={project.id}>\n//               <td>{project.projectname}</td>\n//               <td>{project.developername}</td>\n//               <td>\n\n//               {/* {project.teamleadname|| 'N/A'} */}\n//               <td>{project.teamLeadName || 'N/A'}</td> {/* Display team lead name instead of ID */}\n\n//               </td> {/* Use optional chaining to avoid undefined error */}\n//               <td>\n//                 <button className=\"btn btn-primary btn-sm\" onClick={() => updateProject(project.id)}>\n//                   Edit\n//                 </button>\n//                 <button className=\"btn btn-danger btn-sm\" onClick={() => deleteProject(project.id)}>\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       <div className=\"pagination\">\n//         <button className=\"btn btn-primary\" onClick={handlePrevPage} disabled={currentPage === 1}>\n//           Prev\n//         </button>\n//         <span>Page {currentPage} of {totalPages}</span>\n//         <button className=\"btn btn-primary\" onClick={handleNextPage} disabled={currentPage === totalPages}>\n//           Next\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Projects;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Projects = () => {\n  _s();\n  const [teamLeads, setTeamLeads] = useState([]);\n  const [developers, setDevelopers] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [selectedProject, setSelectedProject] = useState('');\n  const [isCreating, setIsCreating] = useState(true);\n  const [formData, setFormData] = useState({\n    projectname: '',\n    developerId: '',\n    teamLeadId: ''\n  });\n  useEffect(() => {\n    fetchTeamLeads();\n    fetchDevelopers();\n    fetchProjects();\n  }, []);\n  const fetchTeamLeads = async () => {\n    try {\n      // Simulating API call for team leads\n      const dummyTeamLeads = [{\n        id: '1',\n        name: 'John Doe'\n      }, {\n        id: '2',\n        name: 'Jane Smith'\n      }, {\n        id: '3',\n        name: 'Michael Johnson'\n      }];\n      setTeamLeads(dummyTeamLeads);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const fetchDevelopers = async () => {\n    try {\n      // Simulating API call for developers\n      const dummyDevelopers = [{\n        id: '1',\n        name: 'Developer A'\n      }, {\n        id: '2',\n        name: 'Developer B'\n      }, {\n        id: '3',\n        name: 'Developer C'\n      }];\n      setDevelopers(dummyDevelopers);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const fetchProjects = async () => {\n    try {\n      // Simulating API call for projects\n      const dummyProjects = [{\n        id: '1',\n        projectname: 'Project A',\n        developerId: '1',\n        teamLeadId: '1'\n      }, {\n        id: '2',\n        projectname: 'Project B',\n        developerId: '2',\n        teamLeadId: '2'\n      }, {\n        id: '3',\n        projectname: 'Project C',\n        developerId: '3',\n        teamLeadId: '3'\n      }];\n      setProjects(dummyProjects);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleInputChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleCreateOrUpdate = async () => {\n    try {\n      if (isCreating) {\n        // Simulating API call to add a project\n        const newProjectData = {\n          ...formData\n        };\n        setProjects([...projects, newProjectData]);\n        setFormData({\n          projectname: '',\n          developerId: '',\n          teamLeadId: ''\n        });\n        toast.success('Project added successfully');\n      } else {\n        // Simulating API call to update a project\n        const updatedProjects = projects.map(project => project.id === selectedProject ? {\n          ...project,\n          ...formData\n        } : project);\n        setProjects(updatedProjects);\n        toast.success('Project updated successfully');\n      }\n    } catch (error) {\n      console.error(error);\n      toast.error('Failed to save changes');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 843,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"developerSelect\",\n        className: \"form-label\",\n        children: \"Select Developer:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 845,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-select\",\n        id: \"developerSelect\",\n        name: \"developerId\",\n        value: formData.developerId,\n        onChange: handleInputChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select Developer --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 855,\n          columnNumber: 11\n        }, this), developers.map(developer => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: developer.id,\n          children: developer.name\n        }, developer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 857,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 848,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 844,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"teamLeadSelect\",\n        className: \"form-label\",\n        children: \"Select Team Lead:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-select\",\n        id: \"teamLeadSelect\",\n        name: \"teamLeadId\",\n        value: formData.teamLeadId,\n        onChange: handleInputChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select Team Lead --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 874,\n          columnNumber: 11\n        }, this), teamLeads.map(lead => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: lead.id,\n          children: lead.name\n        }, lead.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 876,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 863,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"projectNameInput\",\n        className: \"form-label\",\n        children: \"Project Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 883,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"projectNameInput\",\n        name: \"projectname\",\n        value: formData.projectname,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 882,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleCreateOrUpdate,\n      children: isCreating ? 'Add Project' : 'Save Changes'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 895,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Projects List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 899,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Project Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 903,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Developer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 904,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Team Lead\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 905,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 906,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 901,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: projects.map(project => {\n          var _developers$find, _teamLeads$find;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: project.projectname\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 912,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: (_developers$find = developers.find(dev => dev.id === project.developerId)) === null || _developers$find === void 0 ? void 0 : _developers$find.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 913,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: (_teamLeads$find = teamLeads.find(lead => lead.id === project.teamLeadId)) === null || _teamLeads$find === void 0 ? void 0 : _teamLeads$find.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 914,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-primary btn-sm\",\n                onClick: () => {\n                  setSelectedProject(project.id);\n                  setIsCreating(false);\n                  setFormData({\n                    projectname: project.projectname,\n                    developerId: project.developerId,\n                    teamLeadId: project.teamLeadId\n                  });\n                },\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 916,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 915,\n              columnNumber: 15\n            }, this)]\n          }, project.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 911,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 909,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 900,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 842,\n    columnNumber: 5\n  }, this);\n};\n_s(Projects, \"0miBYIYV5WNEDjNhCCGb/uI33vs=\");\n_c = Projects;\nexport default Projects;\nvar _c;\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["React","useState","useEffect","axios","toast","jsxDEV","_jsxDEV","Projects","_s","teamLeads","setTeamLeads","developers","setDevelopers","projects","setProjects","selectedProject","setSelectedProject","isCreating","setIsCreating","formData","setFormData","projectname","developerId","teamLeadId","fetchTeamLeads","fetchDevelopers","fetchProjects","dummyTeamLeads","id","name","error","console","dummyDevelopers","dummyProjects","handleInputChange","e","target","value","handleCreateOrUpdate","newProjectData","success","updatedProjects","map","project","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","developer","lead","type","onClick","_developers$find","_teamLeads$find","find","dev","_c","$RefreshReg$"],"sources":["E:/Development/PIAIC/hr-appf-rontend/hr-app/src/HrProjects.jsx"],"sourcesContent":["// // import React from 'react';\r\n// // import 'bootstrap/dist/css/bootstrap.css'; // Import Bootstrap CSS\r\n\r\n// // const Projects = () => {\r\n// //   return (\r\n// //     <div className=\"container\">\r\n// //       <h1>Team Leads</h1>\r\n// //       <div className=\"row\">\r\n// //         <div className=\"col-md-6\">\r\n// //           <p>This is a column with Bootstrap classes.</p>\r\n// //         </div>\r\n// //         <div className=\"col-md-6\">\r\n// //           <p>Another column with Bootstrap classes.</p>\r\n// //         </div>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default Projects;\r\n\r\n\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// // const Projects = () => {\r\n// //   const [leads, setLeads] = useState([]);\r\n// //   const [newLead, setNewLead] = useState({ name: '', email: '' });\r\n// //   const [selectedLead, setSelectedLead] = useState(null);\r\n// //   const [editLead, setEditLead] = useState({});\r\n\r\n// //   useEffect(() => {\r\n// //     fetchLeads();\r\n// //   }, []);\r\n\r\n// //   const fetchLeads = async () => {\r\n// //     try {\r\n// //       const response = await axios.get('/api/Projects');\r\n// //       setLeads(response.data);\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const createLead = async () => {\r\n// //     try {\r\n// //       await axios.post('/api/Projects', newLead);\r\n// //       fetchLeads();\r\n// //       setNewLead({ name: '', email: '' });\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const updateLead = async () => {\r\n// //     try {\r\n// //       await axios.put(`/api/Projects/${selectedLead.id}`, editLead);\r\n// //       fetchLeads();\r\n// //       setSelectedLead(null);\r\n// //       setEditLead({});\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const deleteLead = async (leadId) => {\r\n// //     try {\r\n// //       await axios.delete(`/api/Projects/${leadId}`);\r\n// //       fetchLeads();\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleInputChange = (e) => {\r\n// //     setNewLead({ ...newLead, [e.target.name]: e.target.value });\r\n// //   };\r\n\r\n// //   const handleEditInputChange = (e) => {\r\n// //     setEditLead({ ...editLead, [e.target.name]: e.target.value });\r\n// //   };\r\n\r\n// //   const selectLead = (lead) => {\r\n// //     setSelectedLead(lead);\r\n// //     setEditLead(lead);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"container\">\r\n// //       <h1>Projects</h1>\r\n// //       <div className=\"mb-3\">\r\n// //         <label htmlFor=\"nameInput\" className=\"form-label\">Name:</label>\r\n// //         <input type=\"text\" className=\"form-control\" id=\"nameInput\" name=\"name\" value={newLead.name} onChange={handleInputChange} />\r\n// //       </div>\r\n// //       <div className=\"mb-3\">\r\n// //         <label htmlFor=\"emailInput\" className=\"form-label\">Email:</label>\r\n// //         <input type=\"email\" className=\"form-control\" id=\"emailInput\" name=\"email\" value={newLead.email} onChange={handleInputChange} />\r\n// //       </div>\r\n// //       <button className=\"btn btn-primary mb-3\" onClick={createLead}>Add Lead</button>\r\n// //       <table className=\"table table-striped\">\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>Name</th>\r\n// //             <th>Email</th>\r\n// //             <th>Actions</th>\r\n// //           </tr>\r\n// //         </thead>\r\n// //         <tbody>\r\n// //           {leads.map((lead) => (\r\n// //             <tr key={lead.id}>\r\n// //               <td>{lead.name}</td>\r\n// //               <td>{lead.email}</td>\r\n// //               <td>\r\n// //                 <button className=\"btn btn-sm btn-primary me-2\" onClick={() => selectLead(lead)}>Edit</button>\r\n// //                 <button className=\"btn btn-sm btn-danger\" onClick={() => deleteLead(lead.id)}>Delete</button>\r\n// //              </td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table>\r\n// //       {selectedLead && (\r\n// //         <div>\r\n// //           <h3>Edit Lead</h3>\r\n// //           <div className=\"mb-3\">\r\n// //             <label htmlFor=\"editNameInput\" className=\"form-label\">Name:</label>\r\n// //             <input type=\"text\" className=\"form-control\" id=\"editNameInput\" name=\"name\" value={editLead.name} onChange={handleEditInputChange} />\r\n// //           </div>\r\n// //           <div className=\"mb-3\">\r\n// //             <label htmlFor=\"editEmailInput\" className=\"form-label\">Email:</label>\r\n// //             <input type=\"email\" className=\"form-control\" id=\"editEmailInput\" name=\"email\" value={editLead.email} onChange={handleEditInputChange} />\r\n// //           </div>\r\n// //           <button className=\"btn btn-primary me-2\" onClick={updateLead}>Save</button>\r\n// //           <button className=\"btn btn-secondary\" onClick={() => setSelectedLead(null)}>Cancel</button>\r\n// //         </div>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default Projects;\r\n// // Projects.jsx\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { toast } from 'react-toastify';\r\n\r\n// // const Projects = () => {\r\n// //   const [teamLeads, setTeamLeads] = useState([]);\r\n// //   const [projects, setProjects] = useState([]);\r\n// //   const [selectedProject, setSelectedProject] = useState('');\r\n// //   const [selectedLead, setSelectedLead] = useState('');\r\n// //   const [newProject, setNewProject] = useState({ projectname: '', developername: '' });\r\n\r\n// //   useEffect(() => {\r\n// //     fetchTeamLeads();\r\n// //     fetchProjects();\r\n// //   }, []);\r\n\r\n// //   const fetchTeamLeads = async () => {\r\n// //     try {\r\n// //       axios.defaults.baseURL = 'http://localhost:5000';\r\n// //       const response = await axios.get('/api/teamleads');\r\n// //       setTeamLeads(response.data);\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const fetchProjects = async () => {\r\n// //     try {\r\n// //       axios.defaults.baseURL = `http://localhost:5000`;\r\n// //       const response = await axios.get(`/api/projects`);\r\n// //       setProjects(response.data);\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleInputChange = (e) => {\r\n// //     setNewProject({ ...newProject, [e.target.name]: e.target.value });\r\n// //   };\r\n\r\n// //   const handleSelectChange = (e) => {\r\n// //     setSelectedLead(e.target.value);\r\n// //   };\r\n\r\n// //   const createProject = async () => {\r\n// //     try {\r\n// //       const { projectname, developername } = newProject;\r\n// //       axios.defaults.baseURL = 'http://localhost:5000';\r\n// //       const response = await axios.post('/api/projects', { projectname, developername, teamLeadId: selectedLead });\r\n// //       fetchProjects();\r\n// //       setNewProject({ projectname: '', developername: '' });\r\n\r\n// //       if (response.status === 201) {\r\n// //         toast.success('Project added successfully', {\r\n// //           position: 'top-right',\r\n// //           autoClose: 3000,\r\n// //           hideProgressBar: false,\r\n// //           closeOnClick: true,\r\n// //           pauseOnHover: true,\r\n// //           draggable: true,\r\n// //         });\r\n// //       } else {\r\n// //         toast.error('Failed to add project', {\r\n// //           position: 'top-right',\r\n// //           autoClose: 3000,\r\n// //           hideProgressBar: false,\r\n// //           closeOnClick: true,\r\n// //           pauseOnHover: true,\r\n// //           draggable: true,\r\n// //         });\r\n// //       }\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //       toast.error('Failed to add project', {\r\n// //         position: 'top-right',\r\n// //         autoClose: 3000,\r\n// //         hideProgressBar: false,\r\n// //         closeOnClick: true,\r\n// //         pauseOnHover: true,\r\n// //         draggable: true,\r\n// //       });\r\n// //     }\r\n// //   };\r\n\r\n// //   const updateProject = async (id) => {\r\n// //     const updateProject = async (id) => {\r\n// //       try {\r\n// //         const projectToUpdate = projects.find((project) => project.id === id);\r\n// //         if (!projectToUpdate) {\r\n// //           toast.error('Project not found', {\r\n// //             position: 'top-right',\r\n// //             autoClose: 3000,\r\n// //             hideProgressBar: false,\r\n// //             closeOnClick: true,\r\n// //             pauseOnHover: true,\r\n// //             draggable: true,\r\n// //           });\r\n// //           return;\r\n// //         }\r\n    \r\n// //         // Implement the logic to update the project here\r\n// //         const updatedProject = { ...projectToUpdate, projectName: 'Updated Project Name', developerName: 'Updated Developer Name' };\r\n// //         axios.defaults.baseURL = 'http://localhost:5000';\r\n// //         const response = await axios.put(`/api/projects/${id}`, updatedProject);\r\n// //         if (response.status === 200) {\r\n// //           toast.success('Project updated successfully', {\r\n// //             position: 'top-right',\r\n// //             autoClose: 3000,\r\n// //             hideProgressBar: false,\r\n// //             closeOnClick: true,\r\n// //             pauseOnHover: true,\r\n// //             draggable: true,\r\n// //           });\r\n// //           fetchProjects(); // Refresh the projects list after successful update\r\n// //         } else {\r\n// //           toast.error('Failed to update project', {\r\n// //             position: 'top-right',\r\n// //             autoClose: 3000,\r\n// //             hideProgressBar: false,\r\n// //             closeOnClick: true,\r\n// //             pauseOnHover: true,\r\n// //             draggable: true,\r\n// //           });\r\n// //         }\r\n// //       } catch (error) {\r\n// //         console.error(error);\r\n// //         toast.error('Failed to update project', {\r\n// //           position: 'top-right',\r\n// //           autoClose: 3000,\r\n// //           hideProgressBar: false,\r\n// //           closeOnClick: true,\r\n// //           pauseOnHover: true,\r\n// //           draggable: true,\r\n// //         });\r\n// //       }\r\n// //     };\r\n    \r\n// //   };\r\n// //   const getProjectById = async () => {\r\n// //     try {\r\n// //       const response = await axios.get(`/api/projects/${selectedProject}`);\r\n// //       console.log(response.data); // Log the project data fetched by ID\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const deleteProject = async (id) => {\r\n// //     //const deleteProject = async (id) => {\r\n// //       try {\r\n// //         // Implement the logic to delete the project here\r\n// //         axios.defaults.baseURL = 'http://localhost:5000';\r\n// //         const response = await axios.delete(`/api/projects/${id}`);\r\n// //         if (response.status === 200) {\r\n// //           toast.success('Project deleted successfully', {\r\n// //             position: 'top-right',\r\n// //             autoClose: 3000,\r\n// //             hideProgressBar: false,\r\n// //             closeOnClick: true,\r\n// //             pauseOnHover: true,\r\n// //             draggable: true,\r\n// //           });\r\n// //           fetchProjects(); // Refresh the projects list after successful delete\r\n// //         } else {\r\n// //           toast.error('Failed to delete project', {\r\n// //             position: 'top-right',\r\n// //             autoClose: 3000,\r\n// //             hideProgressBar: false,\r\n// //             closeOnClick: true,\r\n// //             pauseOnHover: true,\r\n// //             draggable: true,\r\n// //           });\r\n// //         }\r\n// //       } catch (error) {\r\n// //         console.error(error);\r\n// //         toast.error('Failed to delete project', {\r\n// //           position: 'top-right',\r\n// //           autoClose: 3000,\r\n// //           hideProgressBar: false,\r\n// //           closeOnClick: true,\r\n// //           pauseOnHover: true,\r\n// //           draggable: true,\r\n// //         });\r\n// //       }\r\n// //    // };\r\n    \r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"container\">\r\n// //       <h1>Projects</h1>\r\n// //       <div className=\"mb-3\">\r\n// //         <label htmlFor=\"leadSelect\" className=\"form-label\">Select Team Lead:</label>\r\n// //         <select className=\"form-select\" id=\"leadSelect\" value={selectedLead} onChange={handleSelectChange}>\r\n// //           <option value=\"\">-- Select Team Lead --</option>\r\n// //           {teamLeads.map((lead) => (\r\n// //             <option key={lead.id} value={lead.id}>{lead.name}</option>\r\n// //           ))}\r\n// //         </select>\r\n// //       </div>\r\n// //       <div className=\"mb-3\">\r\n// //         <label htmlFor=\"projectNameInput\" className=\"form-label\">Project Name:</label>\r\n// //         <input type=\"text\" className=\"form-control\" id=\"projectNameInput\" name=\"projectname\" value={newProject.projectname} onChange={handleInputChange} />\r\n// //       </div>\r\n// //       <div className=\"mb-3\">\r\n// //         <label htmlFor=\"developerNameInput\" className=\"form-label\">Developer Name:</label>\r\n// //         <input type=\"text\" className=\"form-control\" id=\"developerNameInput\" name=\"developername\" value={newProject.developername} onChange={handleInputChange} />\r\n// //       </div>\r\n// //       <button className=\"btn btn-primary\" onClick={createProject}>Add Project</button>\r\n\r\n// //       <h2>Projects List</h2>\r\n// //       {/* <table className=\"table\">\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>Project Name</th>\r\n// //             <th>Developer Name</th>\r\n// //             <th>Team Lead</th>\r\n// //             <th>Edit</th>\r\n// //             <th>Delete</th>\r\n// //           </tr>\r\n// //         </thead>\r\n// //         <tbody>\r\n// //           {projects.map((project) => (\r\n// //             <tr key={project.id}>\r\n// //               <td>{project.projectName}</td>\r\n// //               <td>{project.developerName}</td>\r\n// //               <td>{project.teamLead.name}</td>\r\n// //               <td>\r\n// //                 <button className=\"btn btn-sm btn-primary\" onClick={() => updateProject(project.id)}>Edit</button>\r\n// //               </td>\r\n// //               <td>\r\n// //                 <button className=\"btn btn-sm btn-danger\" onClick={() => deleteProject(project.id)}>Delete</button>\r\n// //               </td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table> */}\r\n// //       <table className=\"table\">\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>Project Name</th>\r\n// //             <th>Developer Name</th>\r\n// //             <th>Team Lead</th>\r\n// //             <th>Actions</th>\r\n// //           </tr>\r\n// //         </thead>\r\n// //         <tbody>\r\n// //           {projects.map((project) => (\r\n// //             <tr key={project.id}>\r\n// //               <td>{project.projectname}</td>\r\n// //               <td>{project.developername}</td>\r\n// //               <td>\r\n// //               {/* {project.teamLead ? project.teamLead.name : 'N/A'} */}\r\n// //               {teamLeads.find((lead) => lead.id === project.teamLeadId)?.name || 'N/A'}\r\n// //               </td> //Use optional chaining to avoid undefined error\r\n// //               <td>\r\n// //                 <button className=\"btn btn-primary btn-sm\" onClick={() => updateProject(project.id)}>\r\n// //                   Edit\r\n// //                 </button>\r\n// //                 <button className=\"btn btn-danger btn-sm\" onClick={() => deleteProject(project.id)}>\r\n// //                   Delete\r\n// //                 </button>\r\n// //               </td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default Projects;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { toast } from 'react-toastify';\r\n\r\n// const Projects = () => {\r\n//   const [teamLeads, setTeamLeads] = useState([]);\r\n//   const [projects, setProjects] = useState([]);\r\n//   const [selectedProject, setSelectedProject] = useState('');\r\n//   const [updateProjectData, setUpdateProjectData] = useState({ projectname: '', developername: '' });\r\n\r\n//   const [selectedLead, setSelectedLead] = useState('');\r\n//   const [newProject, setNewProject] = useState({ projectname: '', developername: '' });\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [totalPages, setTotalPages] = useState(1);\r\n\r\n//   useEffect(() => {\r\n//     fetchTeamLeads();\r\n//     fetchProjects(currentPage);\r\n//   }, [currentPage]); // Fetch projects whenever the current page changes\r\n\r\n//   const fetchTeamLeads = async () => {\r\n//     try {\r\n//       axios.defaults.baseURL = 'http://localhost:5000';\r\n//       const response = await axios.get('/api/teamleads');\r\n//       setTeamLeads(response.data);\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchProjects = async (page) => {\r\n//     try {\r\n//       axios.defaults.baseURL = `http://localhost:5000`;\r\n//       const response = await axios.get(`/api/projects?page=${page}&itemsPerPage=10`);\r\n//       setProjects(response.data.projects);\r\n//       setTotalPages(response.data.totalPages);\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     setNewProject({ ...newProject, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleSelectChange = (e) => {\r\n//     setSelectedLead(e.target.value);\r\n//   };\r\n\r\n//   const createProject = async () => {\r\n//     try {\r\n//       const { projectname, developername } = newProject;\r\n//       axios.defaults.baseURL = 'http://localhost:5000';\r\n//       const response = await axios.post('/api/projects', { projectname, developername, teamleadname: selectedLead });\r\n//       fetchProjects(currentPage);\r\n//       setNewProject({ projectname: '', developername: '',teamLeadId: selectedLead });\r\n\r\n//       if (response.status === 201) {\r\n//         toast.success('Project added successfully', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//       } else {\r\n//         toast.error('Failed to add project', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       toast.error('Failed to add project', {\r\n//         position: 'top-right',\r\n//         autoClose: 3000,\r\n//         hideProgressBar: false,\r\n//         closeOnClick: true,\r\n//         pauseOnHover: true,\r\n//         draggable: true,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   // const updateProject = async (id) => {\r\n//   //   try {\r\n//   //     const projectToUpdate = projects.find((project) => project.id === id);\r\n//   //     if (!projectToUpdate) {\r\n//   //       toast.error('Project not found', {\r\n//   //         position: 'top-right',\r\n//   //         autoClose: 3000,\r\n//   //         hideProgressBar: false,\r\n//   //         closeOnClick: true,\r\n//   //         pauseOnHover: true,\r\n//   //         draggable: true,\r\n//   //       });\r\n//   //       return;\r\n//   //     }\r\n\r\n//   //     // Implement the logic to update the project here\r\n//   //     // const updatedProject = { ...projectToUpdate, projectname: 'Updated Project Name', developername: 'Updated Developer Name' };\r\n      \r\n//   //     axios.defaults.baseURL = 'http://localhost:5000';\r\n//   //     const response = await axios.put(`/api/projects/${id}`, updatedProject);\r\n//   //     if (response.status === 200) {\r\n//   //       toast.success('Project updated successfully', {\r\n//   //         position: 'top-right',\r\n//   //         autoClose: 3000,\r\n//   //         hideProgressBar: false,\r\n//   //         closeOnClick: true,\r\n//   //         pauseOnHover: true,\r\n//   //         draggable: true,\r\n//   //       });\r\n//   //       fetchProjects(currentPage); // Refresh the projects list after successful update\r\n//   //     } else {\r\n//   //       toast.error('Failed to update project', {\r\n//   //         position: 'top-right',\r\n//   //         autoClose: 3000,\r\n//   //         hideProgressBar: false,\r\n//   //         closeOnClick: true,\r\n//   //         pauseOnHover: true,\r\n//   //         draggable: true,\r\n//   //       });\r\n//   //     }\r\n//   //   } catch (error) {\r\n//   //     console.error(error);\r\n//   //     toast.error('Failed to update project', {\r\n//   //       position: 'top-right',\r\n//   //       autoClose: 3000,\r\n//   //       hideProgressBar: false,\r\n//   //       closeOnClick: true,\r\n//   //       pauseOnHover: true,\r\n//   //       draggable: true,\r\n//   //     });\r\n//   //   }\r\n//   // };\r\n\r\n//   const updateProject = async (id) => {\r\n//     try {\r\n//       const projectToUpdate = projects.find((project) => project.id === id);\r\n//       if (!projectToUpdate) {\r\n//         toast.error('Project not found', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//         return;\r\n//       }\r\n\r\n//       // Set the updateProjectData state with the properties of the project to be updated\r\n//       setUpdateProjectData({\r\n//         projectname: projectToUpdate.projectname,\r\n//         developername: projectToUpdate.developername,\r\n//       });\r\n\r\n//       // Implement the logic to update the project here\r\n//       axios.defaults.baseURL = 'http://localhost:5000';\r\n//       const response = await axios.put(`/api/projects/${id}`, updateProjectData);\r\n\r\n//       if (response.status === 200) {\r\n//         toast.success('Project updated successfully', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//         fetchProjects(currentPage); // Refresh the projects list after successful update\r\n//       } else {\r\n//         toast.error('Failed to update project', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       toast.error('Failed to update project', {\r\n//         position: 'top-right',\r\n//         autoClose: 3000,\r\n//         hideProgressBar: false,\r\n//         closeOnClick: true,\r\n//         pauseOnHover: true,\r\n//         draggable: true,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const getProjectById = async () => {\r\n//     try {\r\n//       const response = await axios.get(`/api/projects/${selectedProject}`);\r\n//       console.log(response.data); // Log the project data fetched by ID\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const deleteProject = async (id) => {\r\n//     try {\r\n//       // Implement the logic to delete the project here\r\n//       axios.defaults.baseURL = 'http://localhost:5000';\r\n//       const response = await axios.delete(`/api/projects/${id}`);\r\n//       if (response.status === 200) {\r\n//         toast.success('Project deleted successfully', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//         fetchProjects(currentPage); // Refresh the projects list after successful delete\r\n//       } else {\r\n//         toast.error('Failed to delete project', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       toast.error('Failed to delete project', {\r\n//         position: 'top-right',\r\n//         autoClose: 3000,\r\n//         hideProgressBar: false,\r\n//         closeOnClick: true,\r\n//         pauseOnHover: true,\r\n//         draggable: true,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const handlePrevPage = () => {\r\n//     if (currentPage > 1) {\r\n//       setCurrentPage((prevPage) => prevPage - 1);\r\n//     }\r\n//   };\r\n\r\n//   const handleNextPage = () => {\r\n//     if (currentPage < totalPages) {\r\n//       setCurrentPage((prevPage) => prevPage + 1);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h1>Projects</h1>\r\n//       <div className=\"mb-3\">\r\n//         <label htmlFor=\"leadSelect\" className=\"form-label\">Select Team Lead:</label>\r\n//         <select className=\"form-select\" id=\"leadSelect\" value={selectedLead} onChange={handleSelectChange}>\r\n//           <option value=\"\">-- Select Team Lead --</option>\r\n//           {teamLeads.map((lead) => (\r\n//             <option key={lead.id} value={lead.id}>{lead.name}</option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n//       <div className=\"mb-3\">\r\n//         <label htmlFor=\"projectNameInput\" className=\"form-label\">Project Name:</label>\r\n//         <input type=\"text\" className=\"form-control\" id=\"projectNameInput\" name=\"projectname\" value={newProject.projectname} onChange={handleInputChange} />\r\n//       </div>\r\n//       <div className=\"mb-3\">\r\n//         <label htmlFor=\"developerNameInput\" className=\"form-label\">Developer Name:</label>\r\n//         <input type=\"text\" className=\"form-control\" id=\"developerNameInput\" name=\"developername\" value={newProject.developername} onChange={handleInputChange} />\r\n//       </div>\r\n//       <button className=\"btn btn-primary\" onClick={createProject}>Add Project</button>\r\n\r\n//       <h2>Projects List</h2>\r\n//       <table className=\"table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Project Name</th>\r\n//             <th>Developer Name</th>\r\n//             <th>Team Lead</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {projects.map((project) => (\r\n//             <tr key={project.id}>\r\n//               <td>{project.projectname}</td>\r\n//               <td>{project.developername}</td>\r\n//               <td>\r\n              \r\n//               {/* {project.teamleadname|| 'N/A'} */}\r\n//               <td>{project.teamLeadName || 'N/A'}</td> {/* Display team lead name instead of ID */}\r\n              \r\n//               </td> {/* Use optional chaining to avoid undefined error */}\r\n//               <td>\r\n//                 <button className=\"btn btn-primary btn-sm\" onClick={() => updateProject(project.id)}>\r\n//                   Edit\r\n//                 </button>\r\n//                 <button className=\"btn btn-danger btn-sm\" onClick={() => deleteProject(project.id)}>\r\n//                   Delete\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       <div className=\"pagination\">\r\n//         <button className=\"btn btn-primary\" onClick={handlePrevPage} disabled={currentPage === 1}>\r\n//           Prev\r\n//         </button>\r\n//         <span>Page {currentPage} of {totalPages}</span>\r\n//         <button className=\"btn btn-primary\" onClick={handleNextPage} disabled={currentPage === totalPages}>\r\n//           Next\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Projects;\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Projects = () => {\r\n  const [teamLeads, setTeamLeads] = useState([]);\r\n  const [developers, setDevelopers] = useState([]);\r\n  const [projects, setProjects] = useState([]);\r\n  const [selectedProject, setSelectedProject] = useState('');\r\n  const [isCreating, setIsCreating] = useState(true);\r\n  const [formData, setFormData] = useState({\r\n    projectname: '',\r\n    developerId: '',\r\n    teamLeadId: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchTeamLeads();\r\n    fetchDevelopers();\r\n    fetchProjects();\r\n  }, []);\r\n\r\n  const fetchTeamLeads = async () => {\r\n    try {\r\n      // Simulating API call for team leads\r\n      const dummyTeamLeads = [\r\n        { id: '1', name: 'John Doe' },\r\n        { id: '2', name: 'Jane Smith' },\r\n        { id: '3', name: 'Michael Johnson' },\r\n      ];\r\n      setTeamLeads(dummyTeamLeads);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const fetchDevelopers = async () => {\r\n    try {\r\n      // Simulating API call for developers\r\n      const dummyDevelopers = [\r\n        { id: '1', name: 'Developer A' },\r\n        { id: '2', name: 'Developer B' },\r\n        { id: '3', name: 'Developer C' },\r\n      ];\r\n      setDevelopers(dummyDevelopers);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const fetchProjects = async () => {\r\n    try {\r\n      // Simulating API call for projects\r\n      const dummyProjects = [\r\n        { id: '1', projectname: 'Project A', developerId: '1', teamLeadId: '1' },\r\n        { id: '2', projectname: 'Project B', developerId: '2', teamLeadId: '2' },\r\n        { id: '3', projectname: 'Project C', developerId: '3', teamLeadId: '3' },\r\n      ];\r\n      setProjects(dummyProjects);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleCreateOrUpdate = async () => {\r\n    try {\r\n      if (isCreating) {\r\n        // Simulating API call to add a project\r\n        const newProjectData = { ...formData };\r\n        setProjects([...projects, newProjectData]);\r\n        setFormData({\r\n          projectname: '',\r\n          developerId: '',\r\n          teamLeadId: '',\r\n        });\r\n\r\n        toast.success('Project added successfully');\r\n      } else {\r\n        // Simulating API call to update a project\r\n        const updatedProjects = projects.map((project) =>\r\n          project.id === selectedProject ? { ...project, ...formData } : project\r\n        );\r\n        setProjects(updatedProjects);\r\n\r\n        toast.success('Project updated successfully');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error('Failed to save changes');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Projects</h1>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"developerSelect\" className=\"form-label\">\r\n          Select Developer:\r\n        </label>\r\n        <select\r\n          className=\"form-select\"\r\n          id=\"developerSelect\"\r\n          name=\"developerId\"\r\n          value={formData.developerId}\r\n          onChange={handleInputChange}\r\n        >\r\n          <option value=\"\">-- Select Developer --</option>\r\n          {developers.map((developer) => (\r\n            <option key={developer.id} value={developer.id}>\r\n              {developer.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"teamLeadSelect\" className=\"form-label\">\r\n          Select Team Lead:\r\n        </label>\r\n        <select\r\n          className=\"form-select\"\r\n          id=\"teamLeadSelect\"\r\n          name=\"teamLeadId\"\r\n          value={formData.teamLeadId}\r\n          onChange={handleInputChange}\r\n        >\r\n          <option value=\"\">-- Select Team Lead --</option>\r\n          {teamLeads.map((lead) => (\r\n            <option key={lead.id} value={lead.id}>\r\n              {lead.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"projectNameInput\" className=\"form-label\">\r\n          Project Name:\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          id=\"projectNameInput\"\r\n          name=\"projectname\"\r\n          value={formData.projectname}\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n      <button className=\"btn btn-primary\" onClick={handleCreateOrUpdate}>\r\n        {isCreating ? 'Add Project' : 'Save Changes'}\r\n      </button>\r\n\r\n      <h2>Projects List</h2>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Project Name</th>\r\n            <th>Developer</th>\r\n            <th>Team Lead</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {projects.map((project) => (\r\n            <tr key={project.id}>\r\n              <td>{project.projectname}</td>\r\n              <td>{developers.find(dev => dev.id === project.developerId)?.name}</td>\r\n              <td>{teamLeads.find(lead => lead.id === project.teamLeadId)?.name}</td>\r\n              <td>\r\n                <button\r\n                  className=\"btn btn-primary btn-sm\"\r\n                  onClick={() => {\r\n                    setSelectedProject(project.id);\r\n                    setIsCreating(false);\r\n                    setFormData({\r\n                      projectname: project.projectname,\r\n                      developerId: project.developerId,\r\n                      teamLeadId: project.teamLeadId,\r\n                    });\r\n                  }}\r\n                >\r\n                  Edit\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}