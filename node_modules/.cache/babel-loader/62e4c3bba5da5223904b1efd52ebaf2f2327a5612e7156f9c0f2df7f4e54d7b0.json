{"ast":null,"code":"var _jsxFileName = \"E:\\\\Development\\\\PIAIC\\\\hr-appf-rontend\\\\hr-app\\\\src\\\\HrProjects.jsx\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import 'bootstrap/dist/css/bootstrap.css'; // Import Bootstrap CSS\n\n// const Projects = () => {\n//   return (\n//     <div className=\"container\">\n//       <h1>Team Leads</h1>\n//       <div className=\"row\">\n//         <div className=\"col-md-6\">\n//           <p>This is a column with Bootstrap classes.</p>\n//         </div>\n//         <div className=\"col-md-6\">\n//           <p>Another column with Bootstrap classes.</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Projects;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import 'bootstrap/dist/css/bootstrap.css';\n\n// const Projects = () => {\n//   const [leads, setLeads] = useState([]);\n//   const [newLead, setNewLead] = useState({ name: '', email: '' });\n//   const [selectedLead, setSelectedLead] = useState(null);\n//   const [editLead, setEditLead] = useState({});\n\n//   useEffect(() => {\n//     fetchLeads();\n//   }, []);\n\n//   const fetchLeads = async () => {\n//     try {\n//       const response = await axios.get('/api/Projects');\n//       setLeads(response.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const createLead = async () => {\n//     try {\n//       await axios.post('/api/Projects', newLead);\n//       fetchLeads();\n//       setNewLead({ name: '', email: '' });\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const updateLead = async () => {\n//     try {\n//       await axios.put(`/api/Projects/${selectedLead.id}`, editLead);\n//       fetchLeads();\n//       setSelectedLead(null);\n//       setEditLead({});\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const deleteLead = async (leadId) => {\n//     try {\n//       await axios.delete(`/api/Projects/${leadId}`);\n//       fetchLeads();\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     setNewLead({ ...newLead, [e.target.name]: e.target.value });\n//   };\n\n//   const handleEditInputChange = (e) => {\n//     setEditLead({ ...editLead, [e.target.name]: e.target.value });\n//   };\n\n//   const selectLead = (lead) => {\n//     setSelectedLead(lead);\n//     setEditLead(lead);\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Projects</h1>\n//       <div className=\"mb-3\">\n//         <label htmlFor=\"nameInput\" className=\"form-label\">Name:</label>\n//         <input type=\"text\" className=\"form-control\" id=\"nameInput\" name=\"name\" value={newLead.name} onChange={handleInputChange} />\n//       </div>\n//       <div className=\"mb-3\">\n//         <label htmlFor=\"emailInput\" className=\"form-label\">Email:</label>\n//         <input type=\"email\" className=\"form-control\" id=\"emailInput\" name=\"email\" value={newLead.email} onChange={handleInputChange} />\n//       </div>\n//       <button className=\"btn btn-primary mb-3\" onClick={createLead}>Add Lead</button>\n//       <table className=\"table table-striped\">\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Email</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {leads.map((lead) => (\n//             <tr key={lead.id}>\n//               <td>{lead.name}</td>\n//               <td>{lead.email}</td>\n//               <td>\n//                 <button className=\"btn btn-sm btn-primary me-2\" onClick={() => selectLead(lead)}>Edit</button>\n//                 <button className=\"btn btn-sm btn-danger\" onClick={() => deleteLead(lead.id)}>Delete</button>\n//              </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {selectedLead && (\n//         <div>\n//           <h3>Edit Lead</h3>\n//           <div className=\"mb-3\">\n//             <label htmlFor=\"editNameInput\" className=\"form-label\">Name:</label>\n//             <input type=\"text\" className=\"form-control\" id=\"editNameInput\" name=\"name\" value={editLead.name} onChange={handleEditInputChange} />\n//           </div>\n//           <div className=\"mb-3\">\n//             <label htmlFor=\"editEmailInput\" className=\"form-label\">Email:</label>\n//             <input type=\"email\" className=\"form-control\" id=\"editEmailInput\" name=\"email\" value={editLead.email} onChange={handleEditInputChange} />\n//           </div>\n//           <button className=\"btn btn-primary me-2\" onClick={updateLead}>Save</button>\n//           <button className=\"btn btn-secondary\" onClick={() => setSelectedLead(null)}>Cancel</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Projects;\n// Projects.jsx\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n\n// const Projects = () => {\n//   const [teamLeads, setTeamLeads] = useState([]);\n//   const [projects, setProjects] = useState([]);\n//   const [selectedProject, setSelectedProject] = useState('');\n//   const [selectedLead, setSelectedLead] = useState('');\n//   const [newProject, setNewProject] = useState({ projectname: '', developername: '' });\n\n//   useEffect(() => {\n//     fetchTeamLeads();\n//     fetchProjects();\n//   }, []);\n\n//   const fetchTeamLeads = async () => {\n//     try {\n//       axios.defaults.baseURL = 'http://localhost:5000';\n//       const response = await axios.get('/api/teamleads');\n//       setTeamLeads(response.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const fetchProjects = async () => {\n//     try {\n//       axios.defaults.baseURL = `http://localhost:5000`;\n//       const response = await axios.get(`/api/projects`);\n//       setProjects(response.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     setNewProject({ ...newProject, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSelectChange = (e) => {\n//     setSelectedLead(e.target.value);\n//   };\n\n//   const createProject = async () => {\n//     try {\n//       const { projectname, developername } = newProject;\n//       axios.defaults.baseURL = 'http://localhost:5000';\n//       const response = await axios.post('/api/projects', { projectname, developername, teamLeadId: selectedLead });\n//       fetchProjects();\n//       setNewProject({ projectname: '', developername: '' });\n\n//       if (response.status === 201) {\n//         toast.success('Project added successfully', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//       } else {\n//         toast.error('Failed to add project', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       toast.error('Failed to add project', {\n//         position: 'top-right',\n//         autoClose: 3000,\n//         hideProgressBar: false,\n//         closeOnClick: true,\n//         pauseOnHover: true,\n//         draggable: true,\n//       });\n//     }\n//   };\n\n//   const updateProject = async (id) => {\n//     const updateProject = async (id) => {\n//       try {\n//         const projectToUpdate = projects.find((project) => project.id === id);\n//         if (!projectToUpdate) {\n//           toast.error('Project not found', {\n//             position: 'top-right',\n//             autoClose: 3000,\n//             hideProgressBar: false,\n//             closeOnClick: true,\n//             pauseOnHover: true,\n//             draggable: true,\n//           });\n//           return;\n//         }\n\n//         // Implement the logic to update the project here\n//         const updatedProject = { ...projectToUpdate, projectName: 'Updated Project Name', developerName: 'Updated Developer Name' };\n//         axios.defaults.baseURL = 'http://localhost:5000';\n//         const response = await axios.put(`/api/projects/${id}`, updatedProject);\n//         if (response.status === 200) {\n//           toast.success('Project updated successfully', {\n//             position: 'top-right',\n//             autoClose: 3000,\n//             hideProgressBar: false,\n//             closeOnClick: true,\n//             pauseOnHover: true,\n//             draggable: true,\n//           });\n//           fetchProjects(); // Refresh the projects list after successful update\n//         } else {\n//           toast.error('Failed to update project', {\n//             position: 'top-right',\n//             autoClose: 3000,\n//             hideProgressBar: false,\n//             closeOnClick: true,\n//             pauseOnHover: true,\n//             draggable: true,\n//           });\n//         }\n//       } catch (error) {\n//         console.error(error);\n//         toast.error('Failed to update project', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//       }\n//     };\n\n//   };\n//   const getProjectById = async () => {\n//     try {\n//       const response = await axios.get(`/api/projects/${selectedProject}`);\n//       console.log(response.data); // Log the project data fetched by ID\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const deleteProject = async (id) => {\n//     //const deleteProject = async (id) => {\n//       try {\n//         // Implement the logic to delete the project here\n//         axios.defaults.baseURL = 'http://localhost:5000';\n//         const response = await axios.delete(`/api/projects/${id}`);\n//         if (response.status === 200) {\n//           toast.success('Project deleted successfully', {\n//             position: 'top-right',\n//             autoClose: 3000,\n//             hideProgressBar: false,\n//             closeOnClick: true,\n//             pauseOnHover: true,\n//             draggable: true,\n//           });\n//           fetchProjects(); // Refresh the projects list after successful delete\n//         } else {\n//           toast.error('Failed to delete project', {\n//             position: 'top-right',\n//             autoClose: 3000,\n//             hideProgressBar: false,\n//             closeOnClick: true,\n//             pauseOnHover: true,\n//             draggable: true,\n//           });\n//         }\n//       } catch (error) {\n//         console.error(error);\n//         toast.error('Failed to delete project', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//       }\n//    // };\n\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Projects</h1>\n//       <div className=\"mb-3\">\n//         <label htmlFor=\"leadSelect\" className=\"form-label\">Select Team Lead:</label>\n//         <select className=\"form-select\" id=\"leadSelect\" value={selectedLead} onChange={handleSelectChange}>\n//           <option value=\"\">-- Select Team Lead --</option>\n//           {teamLeads.map((lead) => (\n//             <option key={lead.id} value={lead.id}>{lead.name}</option>\n//           ))}\n//         </select>\n//       </div>\n//       <div className=\"mb-3\">\n//         <label htmlFor=\"projectNameInput\" className=\"form-label\">Project Name:</label>\n//         <input type=\"text\" className=\"form-control\" id=\"projectNameInput\" name=\"projectname\" value={newProject.projectname} onChange={handleInputChange} />\n//       </div>\n//       <div className=\"mb-3\">\n//         <label htmlFor=\"developerNameInput\" className=\"form-label\">Developer Name:</label>\n//         <input type=\"text\" className=\"form-control\" id=\"developerNameInput\" name=\"developername\" value={newProject.developername} onChange={handleInputChange} />\n//       </div>\n//       <button className=\"btn btn-primary\" onClick={createProject}>Add Project</button>\n\n//       <h2>Projects List</h2>\n//       {/* <table className=\"table\">\n//         <thead>\n//           <tr>\n//             <th>Project Name</th>\n//             <th>Developer Name</th>\n//             <th>Team Lead</th>\n//             <th>Edit</th>\n//             <th>Delete</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {projects.map((project) => (\n//             <tr key={project.id}>\n//               <td>{project.projectName}</td>\n//               <td>{project.developerName}</td>\n//               <td>{project.teamLead.name}</td>\n//               <td>\n//                 <button className=\"btn btn-sm btn-primary\" onClick={() => updateProject(project.id)}>Edit</button>\n//               </td>\n//               <td>\n//                 <button className=\"btn btn-sm btn-danger\" onClick={() => deleteProject(project.id)}>Delete</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table> */}\n//       <table className=\"table\">\n//         <thead>\n//           <tr>\n//             <th>Project Name</th>\n//             <th>Developer Name</th>\n//             <th>Team Lead</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {projects.map((project) => (\n//             <tr key={project.id}>\n//               <td>{project.projectname}</td>\n//               <td>{project.developername}</td>\n//               <td>\n//               {/* {project.teamLead ? project.teamLead.name : 'N/A'} */}\n//               {teamLeads.find((lead) => lead.id === project.teamLeadId)?.name || 'N/A'}\n//               </td> //Use optional chaining to avoid undefined error\n//               <td>\n//                 <button className=\"btn btn-primary btn-sm\" onClick={() => updateProject(project.id)}>\n//                   Edit\n//                 </button>\n//                 <button className=\"btn btn-danger btn-sm\" onClick={() => deleteProject(project.id)}>\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Projects;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Projects = () => {\n  _s();\n  const [teamLeads, setTeamLeads] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [selectedProject, setSelectedProject] = useState('');\n  const [updateProjectData, setUpdateProjectData] = useState({\n    projectname: '',\n    developername: ''\n  });\n  const [selectedLead, setSelectedLead] = useState('');\n  const [newProject, setNewProject] = useState({\n    projectname: '',\n    developername: ''\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  useEffect(() => {\n    fetchTeamLeads();\n    fetchProjects(currentPage);\n  }, [currentPage]); // Fetch projects whenever the current page changes\n\n  const fetchTeamLeads = async () => {\n    try {\n      axios.defaults.baseURL = 'http://localhost:5000';\n      const response = await axios.get('/api/teamleads');\n      setTeamLeads(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const fetchProjects = async page => {\n    try {\n      axios.defaults.baseURL = `http://localhost:5000`;\n      const response = await axios.get(`/api/projects?page=${page}&itemsPerPage=10`);\n      setProjects(response.data.projects);\n      setTotalPages(response.data.totalPages);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleInputChange = e => {\n    setNewProject({\n      ...newProject,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSelectChange = e => {\n    setSelectedLead(e.target.value);\n  };\n  const createProject = async () => {\n    try {\n      const {\n        projectname,\n        developername\n      } = newProject;\n      axios.defaults.baseURL = 'http://localhost:5000';\n      const response = await axios.post('/api/projects', {\n        projectname,\n        developername,\n        teamleadname: selectedLead\n      });\n      fetchProjects(currentPage);\n      setNewProject({\n        projectname: '',\n        developername: '',\n        teamLeadId: selectedLead\n      });\n      if (response.status === 201) {\n        toast.success('Project added successfully', {\n          position: 'top-right',\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        });\n      } else {\n        toast.error('Failed to add project', {\n          position: 'top-right',\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        });\n      }\n    } catch (error) {\n      console.error(error);\n      toast.error('Failed to add project', {\n        position: 'top-right',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true\n      });\n    }\n  };\n\n  // const updateProject = async (id) => {\n  //   try {\n  //     const projectToUpdate = projects.find((project) => project.id === id);\n  //     if (!projectToUpdate) {\n  //       toast.error('Project not found', {\n  //         position: 'top-right',\n  //         autoClose: 3000,\n  //         hideProgressBar: false,\n  //         closeOnClick: true,\n  //         pauseOnHover: true,\n  //         draggable: true,\n  //       });\n  //       return;\n  //     }\n\n  //     // Implement the logic to update the project here\n  //     // const updatedProject = { ...projectToUpdate, projectname: 'Updated Project Name', developername: 'Updated Developer Name' };\n\n  //     axios.defaults.baseURL = 'http://localhost:5000';\n  //     const response = await axios.put(`/api/projects/${id}`, updatedProject);\n  //     if (response.status === 200) {\n  //       toast.success('Project updated successfully', {\n  //         position: 'top-right',\n  //         autoClose: 3000,\n  //         hideProgressBar: false,\n  //         closeOnClick: true,\n  //         pauseOnHover: true,\n  //         draggable: true,\n  //       });\n  //       fetchProjects(currentPage); // Refresh the projects list after successful update\n  //     } else {\n  //       toast.error('Failed to update project', {\n  //         position: 'top-right',\n  //         autoClose: 3000,\n  //         hideProgressBar: false,\n  //         closeOnClick: true,\n  //         pauseOnHover: true,\n  //         draggable: true,\n  //       });\n  //     }\n  //   } catch (error) {\n  //     console.error(error);\n  //     toast.error('Failed to update project', {\n  //       position: 'top-right',\n  //       autoClose: 3000,\n  //       hideProgressBar: false,\n  //       closeOnClick: true,\n  //       pauseOnHover: true,\n  //       draggable: true,\n  //     });\n  //   }\n  // };\n\n  const updateProject = async id => {\n    try {\n      const projectToUpdate = projects.find(project => project.id === id);\n      if (!projectToUpdate) {\n        toast.error('Project not found', {\n          position: 'top-right',\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        });\n        return;\n      }\n\n      // Set the updateProjectData state with the properties of the project to be updated\n      setUpdateProjectData({\n        projectname: projectToUpdate.projectname,\n        developername: projectToUpdate.developername\n      });\n\n      // Implement the logic to update the project here\n      axios.defaults.baseURL = 'http://localhost:5000';\n      const response = await axios.put(`/api/projects/${id}`, updateProjectData);\n      if (response.status === 200) {\n        toast.success('Project updated successfully', {\n          position: 'top-right',\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        });\n        fetchProjects(currentPage); // Refresh the projects list after successful update\n      } else {\n        toast.error('Failed to update project', {\n          position: 'top-right',\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        });\n      }\n    } catch (error) {\n      console.error(error);\n      toast.error('Failed to update project', {\n        position: 'top-right',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true\n      });\n    }\n  };\n  const getProjectById = async () => {\n    try {\n      const response = await axios.get(`/api/projects/${selectedProject}`);\n      console.log(response.data); // Log the project data fetched by ID\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const deleteProject = async id => {\n    try {\n      // Implement the logic to delete the project here\n      axios.defaults.baseURL = 'http://localhost:5000';\n      const response = await axios.delete(`/api/projects/${id}`);\n      if (response.status === 200) {\n        toast.success('Project deleted successfully', {\n          position: 'top-right',\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        });\n        fetchProjects(currentPage); // Refresh the projects list after successful delete\n      } else {\n        toast.error('Failed to delete project', {\n          position: 'top-right',\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        });\n      }\n    } catch (error) {\n      console.error(error);\n      toast.error('Failed to delete project', {\n        position: 'top-right',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true\n      });\n    }\n  };\n  const handlePrevPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(prevPage => prevPage - 1);\n    }\n  };\n  const handleNextPage = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage(prevPage => prevPage + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"leadSelect\",\n        className: \"form-label\",\n        children: \"Select Team Lead:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-select\",\n        id: \"leadSelect\",\n        value: selectedLead,\n        onChange: handleSelectChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select Team Lead --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 11\n        }, this), teamLeads.map(lead => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: lead.id,\n          children: lead.name\n        }, lead.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"projectNameInput\",\n        className: \"form-label\",\n        children: \"Project Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"projectNameInput\",\n        name: \"projectname\",\n        value: newProject.projectname,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"developerNameInput\",\n        className: \"form-label\",\n        children: \"Developer Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"developerNameInput\",\n        name: \"developername\",\n        value: newProject.developername,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: createProject,\n      children: \"Add Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Projects List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Project Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Developer Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Team Lead\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: projects.map(project => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: project.projectname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: project.developername\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: project.teamLeadName || 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary btn-sm\",\n              onClick: id => updateProject(project.id),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-danger btn-sm\",\n              onClick: () => deleteProject(project.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 723,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 15\n          }, this)]\n        }, project.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 699,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: handlePrevPage,\n        disabled: currentPage === 1,\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page \", currentPage, \" of \", totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: handleNextPage,\n        disabled: currentPage === totalPages,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 736,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 677,\n    columnNumber: 5\n  }, this);\n};\n_s(Projects, \"UGizNFDGctO7nPpUVqhmoOde+3E=\");\n_c = Projects;\nexport default Projects;\nvar _c;\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["React","useState","useEffect","axios","toast","jsxDEV","_jsxDEV","Projects","_s","teamLeads","setTeamLeads","projects","setProjects","selectedProject","setSelectedProject","updateProjectData","setUpdateProjectData","projectname","developername","selectedLead","setSelectedLead","newProject","setNewProject","currentPage","setCurrentPage","totalPages","setTotalPages","fetchTeamLeads","fetchProjects","defaults","baseURL","response","get","data","error","console","page","handleInputChange","e","target","name","value","handleSelectChange","createProject","post","teamleadname","teamLeadId","status","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","updateProject","id","projectToUpdate","find","project","put","getProjectById","log","deleteProject","delete","handlePrevPage","prevPage","handleNextPage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","map","lead","type","onClick","teamLeadName","disabled","_c","$RefreshReg$"],"sources":["E:/Development/PIAIC/hr-appf-rontend/hr-app/src/HrProjects.jsx"],"sourcesContent":["// import React from 'react';\r\n// import 'bootstrap/dist/css/bootstrap.css'; // Import Bootstrap CSS\r\n\r\n// const Projects = () => {\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h1>Team Leads</h1>\r\n//       <div className=\"row\">\r\n//         <div className=\"col-md-6\">\r\n//           <p>This is a column with Bootstrap classes.</p>\r\n//         </div>\r\n//         <div className=\"col-md-6\">\r\n//           <p>Another column with Bootstrap classes.</p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Projects;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// const Projects = () => {\r\n//   const [leads, setLeads] = useState([]);\r\n//   const [newLead, setNewLead] = useState({ name: '', email: '' });\r\n//   const [selectedLead, setSelectedLead] = useState(null);\r\n//   const [editLead, setEditLead] = useState({});\r\n\r\n//   useEffect(() => {\r\n//     fetchLeads();\r\n//   }, []);\r\n\r\n//   const fetchLeads = async () => {\r\n//     try {\r\n//       const response = await axios.get('/api/Projects');\r\n//       setLeads(response.data);\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const createLead = async () => {\r\n//     try {\r\n//       await axios.post('/api/Projects', newLead);\r\n//       fetchLeads();\r\n//       setNewLead({ name: '', email: '' });\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const updateLead = async () => {\r\n//     try {\r\n//       await axios.put(`/api/Projects/${selectedLead.id}`, editLead);\r\n//       fetchLeads();\r\n//       setSelectedLead(null);\r\n//       setEditLead({});\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const deleteLead = async (leadId) => {\r\n//     try {\r\n//       await axios.delete(`/api/Projects/${leadId}`);\r\n//       fetchLeads();\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     setNewLead({ ...newLead, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleEditInputChange = (e) => {\r\n//     setEditLead({ ...editLead, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const selectLead = (lead) => {\r\n//     setSelectedLead(lead);\r\n//     setEditLead(lead);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h1>Projects</h1>\r\n//       <div className=\"mb-3\">\r\n//         <label htmlFor=\"nameInput\" className=\"form-label\">Name:</label>\r\n//         <input type=\"text\" className=\"form-control\" id=\"nameInput\" name=\"name\" value={newLead.name} onChange={handleInputChange} />\r\n//       </div>\r\n//       <div className=\"mb-3\">\r\n//         <label htmlFor=\"emailInput\" className=\"form-label\">Email:</label>\r\n//         <input type=\"email\" className=\"form-control\" id=\"emailInput\" name=\"email\" value={newLead.email} onChange={handleInputChange} />\r\n//       </div>\r\n//       <button className=\"btn btn-primary mb-3\" onClick={createLead}>Add Lead</button>\r\n//       <table className=\"table table-striped\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Name</th>\r\n//             <th>Email</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {leads.map((lead) => (\r\n//             <tr key={lead.id}>\r\n//               <td>{lead.name}</td>\r\n//               <td>{lead.email}</td>\r\n//               <td>\r\n//                 <button className=\"btn btn-sm btn-primary me-2\" onClick={() => selectLead(lead)}>Edit</button>\r\n//                 <button className=\"btn btn-sm btn-danger\" onClick={() => deleteLead(lead.id)}>Delete</button>\r\n//              </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       {selectedLead && (\r\n//         <div>\r\n//           <h3>Edit Lead</h3>\r\n//           <div className=\"mb-3\">\r\n//             <label htmlFor=\"editNameInput\" className=\"form-label\">Name:</label>\r\n//             <input type=\"text\" className=\"form-control\" id=\"editNameInput\" name=\"name\" value={editLead.name} onChange={handleEditInputChange} />\r\n//           </div>\r\n//           <div className=\"mb-3\">\r\n//             <label htmlFor=\"editEmailInput\" className=\"form-label\">Email:</label>\r\n//             <input type=\"email\" className=\"form-control\" id=\"editEmailInput\" name=\"email\" value={editLead.email} onChange={handleEditInputChange} />\r\n//           </div>\r\n//           <button className=\"btn btn-primary me-2\" onClick={updateLead}>Save</button>\r\n//           <button className=\"btn btn-secondary\" onClick={() => setSelectedLead(null)}>Cancel</button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Projects;\r\n// Projects.jsx\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { toast } from 'react-toastify';\r\n\r\n// const Projects = () => {\r\n//   const [teamLeads, setTeamLeads] = useState([]);\r\n//   const [projects, setProjects] = useState([]);\r\n//   const [selectedProject, setSelectedProject] = useState('');\r\n//   const [selectedLead, setSelectedLead] = useState('');\r\n//   const [newProject, setNewProject] = useState({ projectname: '', developername: '' });\r\n\r\n//   useEffect(() => {\r\n//     fetchTeamLeads();\r\n//     fetchProjects();\r\n//   }, []);\r\n\r\n//   const fetchTeamLeads = async () => {\r\n//     try {\r\n//       axios.defaults.baseURL = 'http://localhost:5000';\r\n//       const response = await axios.get('/api/teamleads');\r\n//       setTeamLeads(response.data);\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchProjects = async () => {\r\n//     try {\r\n//       axios.defaults.baseURL = `http://localhost:5000`;\r\n//       const response = await axios.get(`/api/projects`);\r\n//       setProjects(response.data);\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     setNewProject({ ...newProject, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleSelectChange = (e) => {\r\n//     setSelectedLead(e.target.value);\r\n//   };\r\n\r\n//   const createProject = async () => {\r\n//     try {\r\n//       const { projectname, developername } = newProject;\r\n//       axios.defaults.baseURL = 'http://localhost:5000';\r\n//       const response = await axios.post('/api/projects', { projectname, developername, teamLeadId: selectedLead });\r\n//       fetchProjects();\r\n//       setNewProject({ projectname: '', developername: '' });\r\n\r\n//       if (response.status === 201) {\r\n//         toast.success('Project added successfully', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//       } else {\r\n//         toast.error('Failed to add project', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       toast.error('Failed to add project', {\r\n//         position: 'top-right',\r\n//         autoClose: 3000,\r\n//         hideProgressBar: false,\r\n//         closeOnClick: true,\r\n//         pauseOnHover: true,\r\n//         draggable: true,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const updateProject = async (id) => {\r\n//     const updateProject = async (id) => {\r\n//       try {\r\n//         const projectToUpdate = projects.find((project) => project.id === id);\r\n//         if (!projectToUpdate) {\r\n//           toast.error('Project not found', {\r\n//             position: 'top-right',\r\n//             autoClose: 3000,\r\n//             hideProgressBar: false,\r\n//             closeOnClick: true,\r\n//             pauseOnHover: true,\r\n//             draggable: true,\r\n//           });\r\n//           return;\r\n//         }\r\n    \r\n//         // Implement the logic to update the project here\r\n//         const updatedProject = { ...projectToUpdate, projectName: 'Updated Project Name', developerName: 'Updated Developer Name' };\r\n//         axios.defaults.baseURL = 'http://localhost:5000';\r\n//         const response = await axios.put(`/api/projects/${id}`, updatedProject);\r\n//         if (response.status === 200) {\r\n//           toast.success('Project updated successfully', {\r\n//             position: 'top-right',\r\n//             autoClose: 3000,\r\n//             hideProgressBar: false,\r\n//             closeOnClick: true,\r\n//             pauseOnHover: true,\r\n//             draggable: true,\r\n//           });\r\n//           fetchProjects(); // Refresh the projects list after successful update\r\n//         } else {\r\n//           toast.error('Failed to update project', {\r\n//             position: 'top-right',\r\n//             autoClose: 3000,\r\n//             hideProgressBar: false,\r\n//             closeOnClick: true,\r\n//             pauseOnHover: true,\r\n//             draggable: true,\r\n//           });\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//         toast.error('Failed to update project', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//       }\r\n//     };\r\n    \r\n//   };\r\n//   const getProjectById = async () => {\r\n//     try {\r\n//       const response = await axios.get(`/api/projects/${selectedProject}`);\r\n//       console.log(response.data); // Log the project data fetched by ID\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const deleteProject = async (id) => {\r\n//     //const deleteProject = async (id) => {\r\n//       try {\r\n//         // Implement the logic to delete the project here\r\n//         axios.defaults.baseURL = 'http://localhost:5000';\r\n//         const response = await axios.delete(`/api/projects/${id}`);\r\n//         if (response.status === 200) {\r\n//           toast.success('Project deleted successfully', {\r\n//             position: 'top-right',\r\n//             autoClose: 3000,\r\n//             hideProgressBar: false,\r\n//             closeOnClick: true,\r\n//             pauseOnHover: true,\r\n//             draggable: true,\r\n//           });\r\n//           fetchProjects(); // Refresh the projects list after successful delete\r\n//         } else {\r\n//           toast.error('Failed to delete project', {\r\n//             position: 'top-right',\r\n//             autoClose: 3000,\r\n//             hideProgressBar: false,\r\n//             closeOnClick: true,\r\n//             pauseOnHover: true,\r\n//             draggable: true,\r\n//           });\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//         toast.error('Failed to delete project', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//       }\r\n//    // };\r\n    \r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h1>Projects</h1>\r\n//       <div className=\"mb-3\">\r\n//         <label htmlFor=\"leadSelect\" className=\"form-label\">Select Team Lead:</label>\r\n//         <select className=\"form-select\" id=\"leadSelect\" value={selectedLead} onChange={handleSelectChange}>\r\n//           <option value=\"\">-- Select Team Lead --</option>\r\n//           {teamLeads.map((lead) => (\r\n//             <option key={lead.id} value={lead.id}>{lead.name}</option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n//       <div className=\"mb-3\">\r\n//         <label htmlFor=\"projectNameInput\" className=\"form-label\">Project Name:</label>\r\n//         <input type=\"text\" className=\"form-control\" id=\"projectNameInput\" name=\"projectname\" value={newProject.projectname} onChange={handleInputChange} />\r\n//       </div>\r\n//       <div className=\"mb-3\">\r\n//         <label htmlFor=\"developerNameInput\" className=\"form-label\">Developer Name:</label>\r\n//         <input type=\"text\" className=\"form-control\" id=\"developerNameInput\" name=\"developername\" value={newProject.developername} onChange={handleInputChange} />\r\n//       </div>\r\n//       <button className=\"btn btn-primary\" onClick={createProject}>Add Project</button>\r\n\r\n//       <h2>Projects List</h2>\r\n//       {/* <table className=\"table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Project Name</th>\r\n//             <th>Developer Name</th>\r\n//             <th>Team Lead</th>\r\n//             <th>Edit</th>\r\n//             <th>Delete</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {projects.map((project) => (\r\n//             <tr key={project.id}>\r\n//               <td>{project.projectName}</td>\r\n//               <td>{project.developerName}</td>\r\n//               <td>{project.teamLead.name}</td>\r\n//               <td>\r\n//                 <button className=\"btn btn-sm btn-primary\" onClick={() => updateProject(project.id)}>Edit</button>\r\n//               </td>\r\n//               <td>\r\n//                 <button className=\"btn btn-sm btn-danger\" onClick={() => deleteProject(project.id)}>Delete</button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table> */}\r\n//       <table className=\"table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Project Name</th>\r\n//             <th>Developer Name</th>\r\n//             <th>Team Lead</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {projects.map((project) => (\r\n//             <tr key={project.id}>\r\n//               <td>{project.projectname}</td>\r\n//               <td>{project.developername}</td>\r\n//               <td>\r\n//               {/* {project.teamLead ? project.teamLead.name : 'N/A'} */}\r\n//               {teamLeads.find((lead) => lead.id === project.teamLeadId)?.name || 'N/A'}\r\n//               </td> //Use optional chaining to avoid undefined error\r\n//               <td>\r\n//                 <button className=\"btn btn-primary btn-sm\" onClick={() => updateProject(project.id)}>\r\n//                   Edit\r\n//                 </button>\r\n//                 <button className=\"btn btn-danger btn-sm\" onClick={() => deleteProject(project.id)}>\r\n//                   Delete\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Projects;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Projects = () => {\r\n  const [teamLeads, setTeamLeads] = useState([]);\r\n  const [projects, setProjects] = useState([]);\r\n  const [selectedProject, setSelectedProject] = useState('');\r\n  const [updateProjectData, setUpdateProjectData] = useState({ projectname: '', developername: '' });\r\n\r\n  const [selectedLead, setSelectedLead] = useState('');\r\n  const [newProject, setNewProject] = useState({ projectname: '', developername: '' });\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n\r\n  useEffect(() => {\r\n    fetchTeamLeads();\r\n    fetchProjects(currentPage);\r\n  }, [currentPage]); // Fetch projects whenever the current page changes\r\n\r\n  const fetchTeamLeads = async () => {\r\n    try {\r\n      axios.defaults.baseURL = 'http://localhost:5000';\r\n      const response = await axios.get('/api/teamleads');\r\n      setTeamLeads(response.data);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const fetchProjects = async (page) => {\r\n    try {\r\n      axios.defaults.baseURL = `http://localhost:5000`;\r\n      const response = await axios.get(`/api/projects?page=${page}&itemsPerPage=10`);\r\n      setProjects(response.data.projects);\r\n      setTotalPages(response.data.totalPages);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewProject({ ...newProject, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSelectChange = (e) => {\r\n    setSelectedLead(e.target.value);\r\n  };\r\n\r\n  const createProject = async () => {\r\n    try {\r\n      const { projectname, developername } = newProject;\r\n      axios.defaults.baseURL = 'http://localhost:5000';\r\n      const response = await axios.post('/api/projects', { projectname, developername, teamleadname: selectedLead });\r\n      fetchProjects(currentPage);\r\n      setNewProject({ projectname: '', developername: '',teamLeadId: selectedLead });\r\n\r\n      if (response.status === 201) {\r\n        toast.success('Project added successfully', {\r\n          position: 'top-right',\r\n          autoClose: 3000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n        });\r\n      } else {\r\n        toast.error('Failed to add project', {\r\n          position: 'top-right',\r\n          autoClose: 3000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error('Failed to add project', {\r\n        position: 'top-right',\r\n        autoClose: 3000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  // const updateProject = async (id) => {\r\n  //   try {\r\n  //     const projectToUpdate = projects.find((project) => project.id === id);\r\n  //     if (!projectToUpdate) {\r\n  //       toast.error('Project not found', {\r\n  //         position: 'top-right',\r\n  //         autoClose: 3000,\r\n  //         hideProgressBar: false,\r\n  //         closeOnClick: true,\r\n  //         pauseOnHover: true,\r\n  //         draggable: true,\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Implement the logic to update the project here\r\n  //     // const updatedProject = { ...projectToUpdate, projectname: 'Updated Project Name', developername: 'Updated Developer Name' };\r\n      \r\n  //     axios.defaults.baseURL = 'http://localhost:5000';\r\n  //     const response = await axios.put(`/api/projects/${id}`, updatedProject);\r\n  //     if (response.status === 200) {\r\n  //       toast.success('Project updated successfully', {\r\n  //         position: 'top-right',\r\n  //         autoClose: 3000,\r\n  //         hideProgressBar: false,\r\n  //         closeOnClick: true,\r\n  //         pauseOnHover: true,\r\n  //         draggable: true,\r\n  //       });\r\n  //       fetchProjects(currentPage); // Refresh the projects list after successful update\r\n  //     } else {\r\n  //       toast.error('Failed to update project', {\r\n  //         position: 'top-right',\r\n  //         autoClose: 3000,\r\n  //         hideProgressBar: false,\r\n  //         closeOnClick: true,\r\n  //         pauseOnHover: true,\r\n  //         draggable: true,\r\n  //       });\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error(error);\r\n  //     toast.error('Failed to update project', {\r\n  //       position: 'top-right',\r\n  //       autoClose: 3000,\r\n  //       hideProgressBar: false,\r\n  //       closeOnClick: true,\r\n  //       pauseOnHover: true,\r\n  //       draggable: true,\r\n  //     });\r\n  //   }\r\n  // };\r\n\r\n  const updateProject = async (id) => {\r\n    try {\r\n      const projectToUpdate = projects.find((project) => project.id === id);\r\n      if (!projectToUpdate) {\r\n        toast.error('Project not found', {\r\n          position: 'top-right',\r\n          autoClose: 3000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Set the updateProjectData state with the properties of the project to be updated\r\n      setUpdateProjectData({\r\n        projectname: projectToUpdate.projectname,\r\n        developername: projectToUpdate.developername,\r\n      });\r\n\r\n      // Implement the logic to update the project here\r\n      axios.defaults.baseURL = 'http://localhost:5000';\r\n      const response = await axios.put(`/api/projects/${id}`, updateProjectData);\r\n\r\n      if (response.status === 200) {\r\n        toast.success('Project updated successfully', {\r\n          position: 'top-right',\r\n          autoClose: 3000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n        });\r\n        fetchProjects(currentPage); // Refresh the projects list after successful update\r\n      } else {\r\n        toast.error('Failed to update project', {\r\n          position: 'top-right',\r\n          autoClose: 3000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error('Failed to update project', {\r\n        position: 'top-right',\r\n        autoClose: 3000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const getProjectById = async () => {\r\n    try {\r\n      const response = await axios.get(`/api/projects/${selectedProject}`);\r\n      console.log(response.data); // Log the project data fetched by ID\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const deleteProject = async (id) => {\r\n    try {\r\n      // Implement the logic to delete the project here\r\n      axios.defaults.baseURL = 'http://localhost:5000';\r\n      const response = await axios.delete(`/api/projects/${id}`);\r\n      if (response.status === 200) {\r\n        toast.success('Project deleted successfully', {\r\n          position: 'top-right',\r\n          autoClose: 3000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n        });\r\n        fetchProjects(currentPage); // Refresh the projects list after successful delete\r\n      } else {\r\n        toast.error('Failed to delete project', {\r\n          position: 'top-right',\r\n          autoClose: 3000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error('Failed to delete project', {\r\n        position: 'top-right',\r\n        autoClose: 3000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handlePrevPage = () => {\r\n    if (currentPage > 1) {\r\n      setCurrentPage((prevPage) => prevPage - 1);\r\n    }\r\n  };\r\n\r\n  const handleNextPage = () => {\r\n    if (currentPage < totalPages) {\r\n      setCurrentPage((prevPage) => prevPage + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Projects</h1>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"leadSelect\" className=\"form-label\">Select Team Lead:</label>\r\n        <select className=\"form-select\" id=\"leadSelect\" value={selectedLead} onChange={handleSelectChange}>\r\n          <option value=\"\">-- Select Team Lead --</option>\r\n          {teamLeads.map((lead) => (\r\n            <option key={lead.id} value={lead.id}>{lead.name}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"projectNameInput\" className=\"form-label\">Project Name:</label>\r\n        <input type=\"text\" className=\"form-control\" id=\"projectNameInput\" name=\"projectname\" value={newProject.projectname} onChange={handleInputChange} />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"developerNameInput\" className=\"form-label\">Developer Name:</label>\r\n        <input type=\"text\" className=\"form-control\" id=\"developerNameInput\" name=\"developername\" value={newProject.developername} onChange={handleInputChange} />\r\n      </div>\r\n      <button className=\"btn btn-primary\" onClick={createProject}>Add Project</button>\r\n\r\n      <h2>Projects List</h2>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Project Name</th>\r\n            <th>Developer Name</th>\r\n            <th>Team Lead</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {projects.map((project) => (\r\n            <tr key={project.id}>\r\n              <td>{project.projectname}</td>\r\n              <td>{project.developername}</td>\r\n              <td>\r\n              \r\n              {/* {project.teamleadname|| 'N/A'} */}\r\n              <td>{project.teamLeadName || 'N/A'}</td> {/* Display team lead name instead of ID */}\r\n              \r\n              </td> {/* Use optional chaining to avoid undefined error */}\r\n              <td>\r\n                <button className=\"btn btn-primary btn-sm\" onClick={(id) => updateProject(project.id)}>\r\n                  Edit\r\n                </button>\r\n                <button className=\"btn btn-danger btn-sm\" onClick={() => deleteProject(project.id)}>\r\n                  Delete\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"pagination\">\r\n        <button className=\"btn btn-primary\" onClick={handlePrevPage} disabled={currentPage === 1}>\r\n          Prev\r\n        </button>\r\n        <span>Page {currentPage} of {totalPages}</span>\r\n        <button className=\"btn btn-primary\" onClick={handleNextPage} disabled={currentPage === totalPages}>\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACc,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGf,QAAQ,CAAC;IAAEgB,WAAW,EAAE,EAAE;IAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}