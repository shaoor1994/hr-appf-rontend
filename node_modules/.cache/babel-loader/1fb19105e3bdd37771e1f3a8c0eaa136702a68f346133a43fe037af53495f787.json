{"ast":null,"code":"var _jsxFileName = \"E:\\\\Development\\\\PIAIC\\\\hr-appf-rontend\\\\hr-app\\\\src\\\\HrProjects.jsx\",\n  _s = $RefreshSig$();\n// // import React from 'react';\n// // import 'bootstrap/dist/css/bootstrap.css'; // Import Bootstrap CSS\n\n// // const Projects = () => {\n// //   return (\n// //     <div className=\"container\">\n// //       <h1>Team Leads</h1>\n// //       <div className=\"row\">\n// //         <div className=\"col-md-6\">\n// //           <p>This is a column with Bootstrap classes.</p>\n// //         </div>\n// //         <div className=\"col-md-6\">\n// //           <p>Another column with Bootstrap classes.</p>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default Projects;\n\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import 'bootstrap/dist/css/bootstrap.css';\n\n// // const Projects = () => {\n// //   const [leads, setLeads] = useState([]);\n// //   const [newLead, setNewLead] = useState({ name: '', email: '' });\n// //   const [selectedLead, setSelectedLead] = useState(null);\n// //   const [editLead, setEditLead] = useState({});\n\n// //   useEffect(() => {\n// //     fetchLeads();\n// //   }, []);\n\n// //   const fetchLeads = async () => {\n// //     try {\n// //       const response = await axios.get('/api/Projects');\n// //       setLeads(response.data);\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const createLead = async () => {\n// //     try {\n// //       await axios.post('/api/Projects', newLead);\n// //       fetchLeads();\n// //       setNewLead({ name: '', email: '' });\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const updateLead = async () => {\n// //     try {\n// //       await axios.put(`/api/Projects/${selectedLead.id}`, editLead);\n// //       fetchLeads();\n// //       setSelectedLead(null);\n// //       setEditLead({});\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const deleteLead = async (leadId) => {\n// //     try {\n// //       await axios.delete(`/api/Projects/${leadId}`);\n// //       fetchLeads();\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     setNewLead({ ...newLead, [e.target.name]: e.target.value });\n// //   };\n\n// //   const handleEditInputChange = (e) => {\n// //     setEditLead({ ...editLead, [e.target.name]: e.target.value });\n// //   };\n\n// //   const selectLead = (lead) => {\n// //     setSelectedLead(lead);\n// //     setEditLead(lead);\n// //   };\n\n// //   return (\n// //     <div className=\"container\">\n// //       <h1>Projects</h1>\n// //       <div className=\"mb-3\">\n// //         <label htmlFor=\"nameInput\" className=\"form-label\">Name:</label>\n// //         <input type=\"text\" className=\"form-control\" id=\"nameInput\" name=\"name\" value={newLead.name} onChange={handleInputChange} />\n// //       </div>\n// //       <div className=\"mb-3\">\n// //         <label htmlFor=\"emailInput\" className=\"form-label\">Email:</label>\n// //         <input type=\"email\" className=\"form-control\" id=\"emailInput\" name=\"email\" value={newLead.email} onChange={handleInputChange} />\n// //       </div>\n// //       <button className=\"btn btn-primary mb-3\" onClick={createLead}>Add Lead</button>\n// //       <table className=\"table table-striped\">\n// //         <thead>\n// //           <tr>\n// //             <th>Name</th>\n// //             <th>Email</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {leads.map((lead) => (\n// //             <tr key={lead.id}>\n// //               <td>{lead.name}</td>\n// //               <td>{lead.email}</td>\n// //               <td>\n// //                 <button className=\"btn btn-sm btn-primary me-2\" onClick={() => selectLead(lead)}>Edit</button>\n// //                 <button className=\"btn btn-sm btn-danger\" onClick={() => deleteLead(lead.id)}>Delete</button>\n// //              </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //       {selectedLead && (\n// //         <div>\n// //           <h3>Edit Lead</h3>\n// //           <div className=\"mb-3\">\n// //             <label htmlFor=\"editNameInput\" className=\"form-label\">Name:</label>\n// //             <input type=\"text\" className=\"form-control\" id=\"editNameInput\" name=\"name\" value={editLead.name} onChange={handleEditInputChange} />\n// //           </div>\n// //           <div className=\"mb-3\">\n// //             <label htmlFor=\"editEmailInput\" className=\"form-label\">Email:</label>\n// //             <input type=\"email\" className=\"form-control\" id=\"editEmailInput\" name=\"email\" value={editLead.email} onChange={handleEditInputChange} />\n// //           </div>\n// //           <button className=\"btn btn-primary me-2\" onClick={updateLead}>Save</button>\n// //           <button className=\"btn btn-secondary\" onClick={() => setSelectedLead(null)}>Cancel</button>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default Projects;\n// // Projects.jsx\n// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import { toast } from 'react-toastify';\n\n// // const Projects = () => {\n// //   const [teamLeads, setTeamLeads] = useState([]);\n// //   const [projects, setProjects] = useState([]);\n// //   const [selectedProject, setSelectedProject] = useState('');\n// //   const [selectedLead, setSelectedLead] = useState('');\n// //   const [newProject, setNewProject] = useState({ projectname: '', developername: '' });\n\n// //   useEffect(() => {\n// //     fetchTeamLeads();\n// //     fetchProjects();\n// //   }, []);\n\n// //   const fetchTeamLeads = async () => {\n// //     try {\n// //       axios.defaults.baseURL = 'http://localhost:5000';\n// //       const response = await axios.get('/api/teamleads');\n// //       setTeamLeads(response.data);\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const fetchProjects = async () => {\n// //     try {\n// //       axios.defaults.baseURL = `http://localhost:5000`;\n// //       const response = await axios.get(`/api/projects`);\n// //       setProjects(response.data);\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     setNewProject({ ...newProject, [e.target.name]: e.target.value });\n// //   };\n\n// //   const handleSelectChange = (e) => {\n// //     setSelectedLead(e.target.value);\n// //   };\n\n// //   const createProject = async () => {\n// //     try {\n// //       const { projectname, developername } = newProject;\n// //       axios.defaults.baseURL = 'http://localhost:5000';\n// //       const response = await axios.post('/api/projects', { projectname, developername, teamLeadId: selectedLead });\n// //       fetchProjects();\n// //       setNewProject({ projectname: '', developername: '' });\n\n// //       if (response.status === 201) {\n// //         toast.success('Project added successfully', {\n// //           position: 'top-right',\n// //           autoClose: 3000,\n// //           hideProgressBar: false,\n// //           closeOnClick: true,\n// //           pauseOnHover: true,\n// //           draggable: true,\n// //         });\n// //       } else {\n// //         toast.error('Failed to add project', {\n// //           position: 'top-right',\n// //           autoClose: 3000,\n// //           hideProgressBar: false,\n// //           closeOnClick: true,\n// //           pauseOnHover: true,\n// //           draggable: true,\n// //         });\n// //       }\n// //     } catch (error) {\n// //       console.error(error);\n// //       toast.error('Failed to add project', {\n// //         position: 'top-right',\n// //         autoClose: 3000,\n// //         hideProgressBar: false,\n// //         closeOnClick: true,\n// //         pauseOnHover: true,\n// //         draggable: true,\n// //       });\n// //     }\n// //   };\n\n// //   const updateProject = async (id) => {\n// //     const updateProject = async (id) => {\n// //       try {\n// //         const projectToUpdate = projects.find((project) => project.id === id);\n// //         if (!projectToUpdate) {\n// //           toast.error('Project not found', {\n// //             position: 'top-right',\n// //             autoClose: 3000,\n// //             hideProgressBar: false,\n// //             closeOnClick: true,\n// //             pauseOnHover: true,\n// //             draggable: true,\n// //           });\n// //           return;\n// //         }\n\n// //         // Implement the logic to update the project here\n// //         const updatedProject = { ...projectToUpdate, projectName: 'Updated Project Name', developerName: 'Updated Developer Name' };\n// //         axios.defaults.baseURL = 'http://localhost:5000';\n// //         const response = await axios.put(`/api/projects/${id}`, updatedProject);\n// //         if (response.status === 200) {\n// //           toast.success('Project updated successfully', {\n// //             position: 'top-right',\n// //             autoClose: 3000,\n// //             hideProgressBar: false,\n// //             closeOnClick: true,\n// //             pauseOnHover: true,\n// //             draggable: true,\n// //           });\n// //           fetchProjects(); // Refresh the projects list after successful update\n// //         } else {\n// //           toast.error('Failed to update project', {\n// //             position: 'top-right',\n// //             autoClose: 3000,\n// //             hideProgressBar: false,\n// //             closeOnClick: true,\n// //             pauseOnHover: true,\n// //             draggable: true,\n// //           });\n// //         }\n// //       } catch (error) {\n// //         console.error(error);\n// //         toast.error('Failed to update project', {\n// //           position: 'top-right',\n// //           autoClose: 3000,\n// //           hideProgressBar: false,\n// //           closeOnClick: true,\n// //           pauseOnHover: true,\n// //           draggable: true,\n// //         });\n// //       }\n// //     };\n\n// //   };\n// //   const getProjectById = async () => {\n// //     try {\n// //       const response = await axios.get(`/api/projects/${selectedProject}`);\n// //       console.log(response.data); // Log the project data fetched by ID\n// //     } catch (error) {\n// //       console.error(error);\n// //     }\n// //   };\n\n// //   const deleteProject = async (id) => {\n// //     //const deleteProject = async (id) => {\n// //       try {\n// //         // Implement the logic to delete the project here\n// //         axios.defaults.baseURL = 'http://localhost:5000';\n// //         const response = await axios.delete(`/api/projects/${id}`);\n// //         if (response.status === 200) {\n// //           toast.success('Project deleted successfully', {\n// //             position: 'top-right',\n// //             autoClose: 3000,\n// //             hideProgressBar: false,\n// //             closeOnClick: true,\n// //             pauseOnHover: true,\n// //             draggable: true,\n// //           });\n// //           fetchProjects(); // Refresh the projects list after successful delete\n// //         } else {\n// //           toast.error('Failed to delete project', {\n// //             position: 'top-right',\n// //             autoClose: 3000,\n// //             hideProgressBar: false,\n// //             closeOnClick: true,\n// //             pauseOnHover: true,\n// //             draggable: true,\n// //           });\n// //         }\n// //       } catch (error) {\n// //         console.error(error);\n// //         toast.error('Failed to delete project', {\n// //           position: 'top-right',\n// //           autoClose: 3000,\n// //           hideProgressBar: false,\n// //           closeOnClick: true,\n// //           pauseOnHover: true,\n// //           draggable: true,\n// //         });\n// //       }\n// //    // };\n\n// //   };\n\n// //   return (\n// //     <div className=\"container\">\n// //       <h1>Projects</h1>\n// //       <div className=\"mb-3\">\n// //         <label htmlFor=\"leadSelect\" className=\"form-label\">Select Team Lead:</label>\n// //         <select className=\"form-select\" id=\"leadSelect\" value={selectedLead} onChange={handleSelectChange}>\n// //           <option value=\"\">-- Select Team Lead --</option>\n// //           {teamLeads.map((lead) => (\n// //             <option key={lead.id} value={lead.id}>{lead.name}</option>\n// //           ))}\n// //         </select>\n// //       </div>\n// //       <div className=\"mb-3\">\n// //         <label htmlFor=\"projectNameInput\" className=\"form-label\">Project Name:</label>\n// //         <input type=\"text\" className=\"form-control\" id=\"projectNameInput\" name=\"projectname\" value={newProject.projectname} onChange={handleInputChange} />\n// //       </div>\n// //       <div className=\"mb-3\">\n// //         <label htmlFor=\"developerNameInput\" className=\"form-label\">Developer Name:</label>\n// //         <input type=\"text\" className=\"form-control\" id=\"developerNameInput\" name=\"developername\" value={newProject.developername} onChange={handleInputChange} />\n// //       </div>\n// //       <button className=\"btn btn-primary\" onClick={createProject}>Add Project</button>\n\n// //       <h2>Projects List</h2>\n// //       {/* <table className=\"table\">\n// //         <thead>\n// //           <tr>\n// //             <th>Project Name</th>\n// //             <th>Developer Name</th>\n// //             <th>Team Lead</th>\n// //             <th>Edit</th>\n// //             <th>Delete</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {projects.map((project) => (\n// //             <tr key={project.id}>\n// //               <td>{project.projectName}</td>\n// //               <td>{project.developerName}</td>\n// //               <td>{project.teamLead.name}</td>\n// //               <td>\n// //                 <button className=\"btn btn-sm btn-primary\" onClick={() => updateProject(project.id)}>Edit</button>\n// //               </td>\n// //               <td>\n// //                 <button className=\"btn btn-sm btn-danger\" onClick={() => deleteProject(project.id)}>Delete</button>\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table> */}\n// //       <table className=\"table\">\n// //         <thead>\n// //           <tr>\n// //             <th>Project Name</th>\n// //             <th>Developer Name</th>\n// //             <th>Team Lead</th>\n// //             <th>Actions</th>\n// //           </tr>\n// //         </thead>\n// //         <tbody>\n// //           {projects.map((project) => (\n// //             <tr key={project.id}>\n// //               <td>{project.projectname}</td>\n// //               <td>{project.developername}</td>\n// //               <td>\n// //               {/* {project.teamLead ? project.teamLead.name : 'N/A'} */}\n// //               {teamLeads.find((lead) => lead.id === project.teamLeadId)?.name || 'N/A'}\n// //               </td> //Use optional chaining to avoid undefined error\n// //               <td>\n// //                 <button className=\"btn btn-primary btn-sm\" onClick={() => updateProject(project.id)}>\n// //                   Edit\n// //                 </button>\n// //                 <button className=\"btn btn-danger btn-sm\" onClick={() => deleteProject(project.id)}>\n// //                   Delete\n// //                 </button>\n// //               </td>\n// //             </tr>\n// //           ))}\n// //         </tbody>\n// //       </table>\n// //     </div>\n// //   );\n// // };\n\n// // export default Projects;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n\n// const Projects = () => {\n//   const [teamLeads, setTeamLeads] = useState([]);\n//   const [projects, setProjects] = useState([]);\n//   const [selectedProject, setSelectedProject] = useState('');\n//   const [updateProjectData, setUpdateProjectData] = useState({ projectname: '', developername: '' });\n\n//   const [selectedLead, setSelectedLead] = useState('');\n//   const [newProject, setNewProject] = useState({ projectname: '', developername: '' });\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [totalPages, setTotalPages] = useState(1);\n\n//   useEffect(() => {\n//     fetchTeamLeads();\n//     fetchProjects(currentPage);\n//   }, [currentPage]); // Fetch projects whenever the current page changes\n\n//   const fetchTeamLeads = async () => {\n//     try {\n//       axios.defaults.baseURL = 'http://localhost:5000';\n//       const response = await axios.get('/api/teamleads');\n//       setTeamLeads(response.data);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const fetchProjects = async (page) => {\n//     try {\n//       axios.defaults.baseURL = `http://localhost:5000`;\n//       const response = await axios.get(`/api/projects?page=${page}&itemsPerPage=10`);\n//       setProjects(response.data.projects);\n//       setTotalPages(response.data.totalPages);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     setNewProject({ ...newProject, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSelectChange = (e) => {\n//     setSelectedLead(e.target.value);\n//   };\n\n//   const createProject = async () => {\n//     try {\n//       const { projectname, developername } = newProject;\n//       axios.defaults.baseURL = 'http://localhost:5000';\n//       const response = await axios.post('/api/projects', { projectname, developername, teamleadname: selectedLead });\n//       fetchProjects(currentPage);\n//       setNewProject({ projectname: '', developername: '',teamLeadId: selectedLead });\n\n//       if (response.status === 201) {\n//         toast.success('Project added successfully', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//       } else {\n//         toast.error('Failed to add project', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       toast.error('Failed to add project', {\n//         position: 'top-right',\n//         autoClose: 3000,\n//         hideProgressBar: false,\n//         closeOnClick: true,\n//         pauseOnHover: true,\n//         draggable: true,\n//       });\n//     }\n//   };\n\n//   // const updateProject = async (id) => {\n//   //   try {\n//   //     const projectToUpdate = projects.find((project) => project.id === id);\n//   //     if (!projectToUpdate) {\n//   //       toast.error('Project not found', {\n//   //         position: 'top-right',\n//   //         autoClose: 3000,\n//   //         hideProgressBar: false,\n//   //         closeOnClick: true,\n//   //         pauseOnHover: true,\n//   //         draggable: true,\n//   //       });\n//   //       return;\n//   //     }\n\n//   //     // Implement the logic to update the project here\n//   //     // const updatedProject = { ...projectToUpdate, projectname: 'Updated Project Name', developername: 'Updated Developer Name' };\n\n//   //     axios.defaults.baseURL = 'http://localhost:5000';\n//   //     const response = await axios.put(`/api/projects/${id}`, updatedProject);\n//   //     if (response.status === 200) {\n//   //       toast.success('Project updated successfully', {\n//   //         position: 'top-right',\n//   //         autoClose: 3000,\n//   //         hideProgressBar: false,\n//   //         closeOnClick: true,\n//   //         pauseOnHover: true,\n//   //         draggable: true,\n//   //       });\n//   //       fetchProjects(currentPage); // Refresh the projects list after successful update\n//   //     } else {\n//   //       toast.error('Failed to update project', {\n//   //         position: 'top-right',\n//   //         autoClose: 3000,\n//   //         hideProgressBar: false,\n//   //         closeOnClick: true,\n//   //         pauseOnHover: true,\n//   //         draggable: true,\n//   //       });\n//   //     }\n//   //   } catch (error) {\n//   //     console.error(error);\n//   //     toast.error('Failed to update project', {\n//   //       position: 'top-right',\n//   //       autoClose: 3000,\n//   //       hideProgressBar: false,\n//   //       closeOnClick: true,\n//   //       pauseOnHover: true,\n//   //       draggable: true,\n//   //     });\n//   //   }\n//   // };\n\n//   const updateProject = async (id) => {\n//     try {\n//       const projectToUpdate = projects.find((project) => project.id === id);\n//       if (!projectToUpdate) {\n//         toast.error('Project not found', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//         return;\n//       }\n\n//       // Set the updateProjectData state with the properties of the project to be updated\n//       setUpdateProjectData({\n//         projectname: projectToUpdate.projectname,\n//         developername: projectToUpdate.developername,\n//       });\n\n//       // Implement the logic to update the project here\n//       axios.defaults.baseURL = 'http://localhost:5000';\n//       const response = await axios.put(`/api/projects/${id}`, updateProjectData);\n\n//       if (response.status === 200) {\n//         toast.success('Project updated successfully', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//         fetchProjects(currentPage); // Refresh the projects list after successful update\n//       } else {\n//         toast.error('Failed to update project', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       toast.error('Failed to update project', {\n//         position: 'top-right',\n//         autoClose: 3000,\n//         hideProgressBar: false,\n//         closeOnClick: true,\n//         pauseOnHover: true,\n//         draggable: true,\n//       });\n//     }\n//   };\n\n//   const getProjectById = async () => {\n//     try {\n//       const response = await axios.get(`/api/projects/${selectedProject}`);\n//       console.log(response.data); // Log the project data fetched by ID\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const deleteProject = async (id) => {\n//     try {\n//       // Implement the logic to delete the project here\n//       axios.defaults.baseURL = 'http://localhost:5000';\n//       const response = await axios.delete(`/api/projects/${id}`);\n//       if (response.status === 200) {\n//         toast.success('Project deleted successfully', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//         fetchProjects(currentPage); // Refresh the projects list after successful delete\n//       } else {\n//         toast.error('Failed to delete project', {\n//           position: 'top-right',\n//           autoClose: 3000,\n//           hideProgressBar: false,\n//           closeOnClick: true,\n//           pauseOnHover: true,\n//           draggable: true,\n//         });\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       toast.error('Failed to delete project', {\n//         position: 'top-right',\n//         autoClose: 3000,\n//         hideProgressBar: false,\n//         closeOnClick: true,\n//         pauseOnHover: true,\n//         draggable: true,\n//       });\n//     }\n//   };\n\n//   const handlePrevPage = () => {\n//     if (currentPage > 1) {\n//       setCurrentPage((prevPage) => prevPage - 1);\n//     }\n//   };\n\n//   const handleNextPage = () => {\n//     if (currentPage < totalPages) {\n//       setCurrentPage((prevPage) => prevPage + 1);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Projects</h1>\n//       <div className=\"mb-3\">\n//         <label htmlFor=\"leadSelect\" className=\"form-label\">Select Team Lead:</label>\n//         <select className=\"form-select\" id=\"leadSelect\" value={selectedLead} onChange={handleSelectChange}>\n//           <option value=\"\">-- Select Team Lead --</option>\n//           {teamLeads.map((lead) => (\n//             <option key={lead.id} value={lead.id}>{lead.name}</option>\n//           ))}\n//         </select>\n//       </div>\n//       <div className=\"mb-3\">\n//         <label htmlFor=\"projectNameInput\" className=\"form-label\">Project Name:</label>\n//         <input type=\"text\" className=\"form-control\" id=\"projectNameInput\" name=\"projectname\" value={newProject.projectname} onChange={handleInputChange} />\n//       </div>\n//       <div className=\"mb-3\">\n//         <label htmlFor=\"developerNameInput\" className=\"form-label\">Developer Name:</label>\n//         <input type=\"text\" className=\"form-control\" id=\"developerNameInput\" name=\"developername\" value={newProject.developername} onChange={handleInputChange} />\n//       </div>\n//       <button className=\"btn btn-primary\" onClick={createProject}>Add Project</button>\n\n//       <h2>Projects List</h2>\n//       <table className=\"table\">\n//         <thead>\n//           <tr>\n//             <th>Project Name</th>\n//             <th>Developer Name</th>\n//             <th>Team Lead</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {projects.map((project) => (\n//             <tr key={project.id}>\n//               <td>{project.projectname}</td>\n//               <td>{project.developername}</td>\n//               <td>\n\n//               {/* {project.teamleadname|| 'N/A'} */}\n//               <td>{project.teamLeadName || 'N/A'}</td> {/* Display team lead name instead of ID */}\n\n//               </td> {/* Use optional chaining to avoid undefined error */}\n//               <td>\n//                 <button className=\"btn btn-primary btn-sm\" onClick={() => updateProject(project.id)}>\n//                   Edit\n//                 </button>\n//                 <button className=\"btn btn-danger btn-sm\" onClick={() => deleteProject(project.id)}>\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       <div className=\"pagination\">\n//         <button className=\"btn btn-primary\" onClick={handlePrevPage} disabled={currentPage === 1}>\n//           Prev\n//         </button>\n//         <span>Page {currentPage} of {totalPages}</span>\n//         <button className=\"btn btn-primary\" onClick={handleNextPage} disabled={currentPage === totalPages}>\n//           Next\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Projects;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Projects = () => {\n  _s();\n  const [teamLeads, setTeamLeads] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [selectedProject, setSelectedProject] = useState('');\n  const [updateProjectData, setUpdateProjectData] = useState({\n    projectname: '',\n    developername: '',\n    teamLeadId: ''\n  });\n  const [selectedLead, setSelectedLead] = useState('');\n  const [newProject, setNewProject] = useState({\n    projectname: '',\n    developername: '',\n    teamLeadId: ''\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  useEffect(() => {\n    fetchTeamLeads();\n    fetchProjects(currentPage);\n  }, [currentPage]);\n  const fetchTeamLeads = async () => {\n    try {\n      // Simulating API call for team leads\n      const dummyTeamLeads = [{\n        id: '1',\n        name: 'John Doe'\n      }, {\n        id: '2',\n        name: 'Jane Smith'\n      }, {\n        id: '3',\n        name: 'Michael Johnson'\n      }];\n      setTeamLeads(dummyTeamLeads);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const fetchProjects = async page => {\n    try {\n      // Simulating API call for projects\n      const dummyProjects = [{\n        id: '1',\n        projectname: 'Project A',\n        developername: 'Dev A',\n        teamLeadId: '1',\n        teamLeadName: 'John Doe'\n      }, {\n        id: '2',\n        projectname: 'Project B',\n        developername: 'Dev B',\n        teamLeadId: '2',\n        teamLeadName: 'Jane Smith'\n      }, {\n        id: '3',\n        projectname: 'Project C',\n        developername: 'Dev C',\n        teamLeadId: '3',\n        teamLeadName: 'Michael Johnson'\n      }];\n      setProjects(dummyProjects);\n      setTotalPages(1); // Dummy value for simplicity\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleInputChange = e => {\n    setNewProject({\n      ...newProject,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSelectChange = e => {\n    setSelectedLead(e.target.value);\n  };\n  const createProject = async () => {\n    try {\n      // Simulating API call to add a project\n      const newProjectData = {\n        ...newProject,\n        teamLeadId: selectedLead\n      };\n      setProjects([...projects, newProjectData]);\n      setNewProject({\n        projectname: '',\n        developername: '',\n        teamLeadId: ''\n      });\n      setSelectedLead('');\n      toast.success('Project added successfully');\n    } catch (error) {\n      console.error(error);\n      toast.error('Failed to add project');\n    }\n  };\n  const updateProject = async id => {\n    try {\n      // Simulating API call to update a project\n      const updatedProjects = projects.map(project => project.id === id ? {\n        ...project,\n        ...updateProjectData\n      } : project);\n      setProjects(updatedProjects);\n      setUpdateProjectData({\n        projectname: '',\n        developername: '',\n        teamLeadId: ''\n      });\n      toast.success('Project updated successfully');\n    } catch (error) {\n      console.error(error);\n      toast.error('Failed to update project');\n    }\n  };\n  const deleteProject = async id => {\n    try {\n      // Simulating API call to delete a project\n      const filteredProjects = projects.filter(project => project.id !== id);\n      setProjects(filteredProjects);\n      toast.success('Project deleted successfully');\n    } catch (error) {\n      console.error(error);\n      toast.error('Failed to delete project');\n    }\n  };\n  const handlePrevPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(prevPage => prevPage - 1);\n    }\n  };\n  const handleNextPage = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage(prevPage => prevPage + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 891,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"leadSelect\",\n        className: \"form-label\",\n        children: \"Select Team Lead:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 893,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-select\",\n        id: \"leadSelect\",\n        value: selectedLead,\n        onChange: handleSelectChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select Team Lead --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 11\n        }, this), teamLeads.map(lead => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: lead.id,\n          children: lead.name\n        }, lead.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 892,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"projectNameInput\",\n        className: \"form-label\",\n        children: \"Project Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"projectNameInput\",\n        name: \"projectname\",\n        value: newProject.projectname,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 914,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 910,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"developerNameInput\",\n        className: \"form-label\",\n        children: \"Developer Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 924,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"developerNameInput\",\n        name: \"developername\",\n        value: newProject.developername,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 927,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 923,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: createProject,\n      children: \"Add Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 936,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Projects List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 940,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Project Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 944,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Developer Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 945,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Team Lead\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 946,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 947,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 943,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 942,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: projects.map(project => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: project.projectname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 953,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: project.developername\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 954,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: project.teamLeadName || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 955,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary btn-sm\",\n              onClick: () => {\n                setSelectedProject(project.id);\n                setUpdateProjectData({\n                  projectname: project.projectname,\n                  developername: project.developername,\n                  teamLeadId: project.teamLeadId\n                });\n              },\n              \"data-bs-toggle\": \"modal\",\n              \"data-bs-target\": \"#editModal\",\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 957,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-danger btn-sm\",\n              onClick: () => deleteProject(project.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 972,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 956,\n            columnNumber: 15\n          }, this)]\n        }, project.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 952,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 941,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: handlePrevPage,\n        disabled: currentPage === 1,\n        children: \"Previous Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 984,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: handleNextPage,\n        disabled: currentPage === totalPages,\n        children: \"Next Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 991,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 983,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal fade\",\n      id: \"editModal\",\n      tabIndex: \"-1\",\n      \"aria-labelledby\": \"editModalLabel\",\n      \"aria-hidden\": \"true\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog modal-dialog-centered\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"modal-title\",\n              id: \"editModalLabel\",\n              children: \"Edit Project\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1011,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn-close\",\n              \"data-bs-dismiss\": \"modal\",\n              \"aria-label\": \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1014,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1010,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"editProjectNameInput\",\n                className: \"form-label\",\n                children: \"Project Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1023,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"form-control\",\n                id: \"editProjectNameInput\",\n                name: \"projectname\",\n                value: updateProjectData.projectname,\n                onChange: e => setUpdateProjectData({\n                  ...updateProjectData,\n                  projectname: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1026,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1022,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"editDeveloperNameInput\",\n                className: \"form-label\",\n                children: \"Developer Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1041,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"form-control\",\n                id: \"editDeveloperNameInput\",\n                name: \"developername\",\n                value: updateProjectData.developername,\n                onChange: e => setUpdateProjectData({\n                  ...updateProjectData,\n                  developername: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1044,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1040,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"editLeadSelect\",\n                className: \"form-label\",\n                children: \"Select Team Lead:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1059,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"form-select\",\n                id: \"editLeadSelect\",\n                name: \"teamLeadId\",\n                value: updateProjectData.teamLeadId,\n                onChange: e => setUpdateProjectData({\n                  ...updateProjectData,\n                  teamLeadId: e.target.value\n                }),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"-- Select Team Lead --\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1074,\n                  columnNumber: 19\n                }, this), teamLeads.map(lead => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: lead.id,\n                  children: lead.name\n                }, lead.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1076,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1062,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1058,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1021,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-secondary\",\n              \"data-bs-dismiss\": \"modal\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1084,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-primary\",\n              onClick: () => updateProject(selectedProject),\n              \"data-bs-dismiss\": \"modal\",\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1091,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1083,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1009,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1008,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1001,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 890,\n    columnNumber: 5\n  }, this);\n};\n_s(Projects, \"esFy6yL6bFzhL+nE1/3rJyxRjG8=\");\n_c = Projects;\nexport default Projects;\nvar _c;\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["React","useState","useEffect","axios","toast","jsxDEV","_jsxDEV","Projects","_s","teamLeads","setTeamLeads","projects","setProjects","selectedProject","setSelectedProject","updateProjectData","setUpdateProjectData","projectname","developername","teamLeadId","selectedLead","setSelectedLead","newProject","setNewProject","currentPage","setCurrentPage","totalPages","setTotalPages","fetchTeamLeads","fetchProjects","dummyTeamLeads","id","name","error","console","page","dummyProjects","teamLeadName","handleInputChange","e","target","value","handleSelectChange","createProject","newProjectData","success","updateProject","updatedProjects","map","project","deleteProject","filteredProjects","filter","handlePrevPage","prevPage","handleNextPage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","lead","type","onClick","disabled","tabIndex","_c","$RefreshReg$"],"sources":["E:/Development/PIAIC/hr-appf-rontend/hr-app/src/HrProjects.jsx"],"sourcesContent":["// // import React from 'react';\r\n// // import 'bootstrap/dist/css/bootstrap.css'; // Import Bootstrap CSS\r\n\r\n// // const Projects = () => {\r\n// //   return (\r\n// //     <div className=\"container\">\r\n// //       <h1>Team Leads</h1>\r\n// //       <div className=\"row\">\r\n// //         <div className=\"col-md-6\">\r\n// //           <p>This is a column with Bootstrap classes.</p>\r\n// //         </div>\r\n// //         <div className=\"col-md-6\">\r\n// //           <p>Another column with Bootstrap classes.</p>\r\n// //         </div>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default Projects;\r\n\r\n\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n// // const Projects = () => {\r\n// //   const [leads, setLeads] = useState([]);\r\n// //   const [newLead, setNewLead] = useState({ name: '', email: '' });\r\n// //   const [selectedLead, setSelectedLead] = useState(null);\r\n// //   const [editLead, setEditLead] = useState({});\r\n\r\n// //   useEffect(() => {\r\n// //     fetchLeads();\r\n// //   }, []);\r\n\r\n// //   const fetchLeads = async () => {\r\n// //     try {\r\n// //       const response = await axios.get('/api/Projects');\r\n// //       setLeads(response.data);\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const createLead = async () => {\r\n// //     try {\r\n// //       await axios.post('/api/Projects', newLead);\r\n// //       fetchLeads();\r\n// //       setNewLead({ name: '', email: '' });\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const updateLead = async () => {\r\n// //     try {\r\n// //       await axios.put(`/api/Projects/${selectedLead.id}`, editLead);\r\n// //       fetchLeads();\r\n// //       setSelectedLead(null);\r\n// //       setEditLead({});\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const deleteLead = async (leadId) => {\r\n// //     try {\r\n// //       await axios.delete(`/api/Projects/${leadId}`);\r\n// //       fetchLeads();\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleInputChange = (e) => {\r\n// //     setNewLead({ ...newLead, [e.target.name]: e.target.value });\r\n// //   };\r\n\r\n// //   const handleEditInputChange = (e) => {\r\n// //     setEditLead({ ...editLead, [e.target.name]: e.target.value });\r\n// //   };\r\n\r\n// //   const selectLead = (lead) => {\r\n// //     setSelectedLead(lead);\r\n// //     setEditLead(lead);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"container\">\r\n// //       <h1>Projects</h1>\r\n// //       <div className=\"mb-3\">\r\n// //         <label htmlFor=\"nameInput\" className=\"form-label\">Name:</label>\r\n// //         <input type=\"text\" className=\"form-control\" id=\"nameInput\" name=\"name\" value={newLead.name} onChange={handleInputChange} />\r\n// //       </div>\r\n// //       <div className=\"mb-3\">\r\n// //         <label htmlFor=\"emailInput\" className=\"form-label\">Email:</label>\r\n// //         <input type=\"email\" className=\"form-control\" id=\"emailInput\" name=\"email\" value={newLead.email} onChange={handleInputChange} />\r\n// //       </div>\r\n// //       <button className=\"btn btn-primary mb-3\" onClick={createLead}>Add Lead</button>\r\n// //       <table className=\"table table-striped\">\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>Name</th>\r\n// //             <th>Email</th>\r\n// //             <th>Actions</th>\r\n// //           </tr>\r\n// //         </thead>\r\n// //         <tbody>\r\n// //           {leads.map((lead) => (\r\n// //             <tr key={lead.id}>\r\n// //               <td>{lead.name}</td>\r\n// //               <td>{lead.email}</td>\r\n// //               <td>\r\n// //                 <button className=\"btn btn-sm btn-primary me-2\" onClick={() => selectLead(lead)}>Edit</button>\r\n// //                 <button className=\"btn btn-sm btn-danger\" onClick={() => deleteLead(lead.id)}>Delete</button>\r\n// //              </td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table>\r\n// //       {selectedLead && (\r\n// //         <div>\r\n// //           <h3>Edit Lead</h3>\r\n// //           <div className=\"mb-3\">\r\n// //             <label htmlFor=\"editNameInput\" className=\"form-label\">Name:</label>\r\n// //             <input type=\"text\" className=\"form-control\" id=\"editNameInput\" name=\"name\" value={editLead.name} onChange={handleEditInputChange} />\r\n// //           </div>\r\n// //           <div className=\"mb-3\">\r\n// //             <label htmlFor=\"editEmailInput\" className=\"form-label\">Email:</label>\r\n// //             <input type=\"email\" className=\"form-control\" id=\"editEmailInput\" name=\"email\" value={editLead.email} onChange={handleEditInputChange} />\r\n// //           </div>\r\n// //           <button className=\"btn btn-primary me-2\" onClick={updateLead}>Save</button>\r\n// //           <button className=\"btn btn-secondary\" onClick={() => setSelectedLead(null)}>Cancel</button>\r\n// //         </div>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default Projects;\r\n// // Projects.jsx\r\n// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import { toast } from 'react-toastify';\r\n\r\n// // const Projects = () => {\r\n// //   const [teamLeads, setTeamLeads] = useState([]);\r\n// //   const [projects, setProjects] = useState([]);\r\n// //   const [selectedProject, setSelectedProject] = useState('');\r\n// //   const [selectedLead, setSelectedLead] = useState('');\r\n// //   const [newProject, setNewProject] = useState({ projectname: '', developername: '' });\r\n\r\n// //   useEffect(() => {\r\n// //     fetchTeamLeads();\r\n// //     fetchProjects();\r\n// //   }, []);\r\n\r\n// //   const fetchTeamLeads = async () => {\r\n// //     try {\r\n// //       axios.defaults.baseURL = 'http://localhost:5000';\r\n// //       const response = await axios.get('/api/teamleads');\r\n// //       setTeamLeads(response.data);\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const fetchProjects = async () => {\r\n// //     try {\r\n// //       axios.defaults.baseURL = `http://localhost:5000`;\r\n// //       const response = await axios.get(`/api/projects`);\r\n// //       setProjects(response.data);\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleInputChange = (e) => {\r\n// //     setNewProject({ ...newProject, [e.target.name]: e.target.value });\r\n// //   };\r\n\r\n// //   const handleSelectChange = (e) => {\r\n// //     setSelectedLead(e.target.value);\r\n// //   };\r\n\r\n// //   const createProject = async () => {\r\n// //     try {\r\n// //       const { projectname, developername } = newProject;\r\n// //       axios.defaults.baseURL = 'http://localhost:5000';\r\n// //       const response = await axios.post('/api/projects', { projectname, developername, teamLeadId: selectedLead });\r\n// //       fetchProjects();\r\n// //       setNewProject({ projectname: '', developername: '' });\r\n\r\n// //       if (response.status === 201) {\r\n// //         toast.success('Project added successfully', {\r\n// //           position: 'top-right',\r\n// //           autoClose: 3000,\r\n// //           hideProgressBar: false,\r\n// //           closeOnClick: true,\r\n// //           pauseOnHover: true,\r\n// //           draggable: true,\r\n// //         });\r\n// //       } else {\r\n// //         toast.error('Failed to add project', {\r\n// //           position: 'top-right',\r\n// //           autoClose: 3000,\r\n// //           hideProgressBar: false,\r\n// //           closeOnClick: true,\r\n// //           pauseOnHover: true,\r\n// //           draggable: true,\r\n// //         });\r\n// //       }\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //       toast.error('Failed to add project', {\r\n// //         position: 'top-right',\r\n// //         autoClose: 3000,\r\n// //         hideProgressBar: false,\r\n// //         closeOnClick: true,\r\n// //         pauseOnHover: true,\r\n// //         draggable: true,\r\n// //       });\r\n// //     }\r\n// //   };\r\n\r\n// //   const updateProject = async (id) => {\r\n// //     const updateProject = async (id) => {\r\n// //       try {\r\n// //         const projectToUpdate = projects.find((project) => project.id === id);\r\n// //         if (!projectToUpdate) {\r\n// //           toast.error('Project not found', {\r\n// //             position: 'top-right',\r\n// //             autoClose: 3000,\r\n// //             hideProgressBar: false,\r\n// //             closeOnClick: true,\r\n// //             pauseOnHover: true,\r\n// //             draggable: true,\r\n// //           });\r\n// //           return;\r\n// //         }\r\n    \r\n// //         // Implement the logic to update the project here\r\n// //         const updatedProject = { ...projectToUpdate, projectName: 'Updated Project Name', developerName: 'Updated Developer Name' };\r\n// //         axios.defaults.baseURL = 'http://localhost:5000';\r\n// //         const response = await axios.put(`/api/projects/${id}`, updatedProject);\r\n// //         if (response.status === 200) {\r\n// //           toast.success('Project updated successfully', {\r\n// //             position: 'top-right',\r\n// //             autoClose: 3000,\r\n// //             hideProgressBar: false,\r\n// //             closeOnClick: true,\r\n// //             pauseOnHover: true,\r\n// //             draggable: true,\r\n// //           });\r\n// //           fetchProjects(); // Refresh the projects list after successful update\r\n// //         } else {\r\n// //           toast.error('Failed to update project', {\r\n// //             position: 'top-right',\r\n// //             autoClose: 3000,\r\n// //             hideProgressBar: false,\r\n// //             closeOnClick: true,\r\n// //             pauseOnHover: true,\r\n// //             draggable: true,\r\n// //           });\r\n// //         }\r\n// //       } catch (error) {\r\n// //         console.error(error);\r\n// //         toast.error('Failed to update project', {\r\n// //           position: 'top-right',\r\n// //           autoClose: 3000,\r\n// //           hideProgressBar: false,\r\n// //           closeOnClick: true,\r\n// //           pauseOnHover: true,\r\n// //           draggable: true,\r\n// //         });\r\n// //       }\r\n// //     };\r\n    \r\n// //   };\r\n// //   const getProjectById = async () => {\r\n// //     try {\r\n// //       const response = await axios.get(`/api/projects/${selectedProject}`);\r\n// //       console.log(response.data); // Log the project data fetched by ID\r\n// //     } catch (error) {\r\n// //       console.error(error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const deleteProject = async (id) => {\r\n// //     //const deleteProject = async (id) => {\r\n// //       try {\r\n// //         // Implement the logic to delete the project here\r\n// //         axios.defaults.baseURL = 'http://localhost:5000';\r\n// //         const response = await axios.delete(`/api/projects/${id}`);\r\n// //         if (response.status === 200) {\r\n// //           toast.success('Project deleted successfully', {\r\n// //             position: 'top-right',\r\n// //             autoClose: 3000,\r\n// //             hideProgressBar: false,\r\n// //             closeOnClick: true,\r\n// //             pauseOnHover: true,\r\n// //             draggable: true,\r\n// //           });\r\n// //           fetchProjects(); // Refresh the projects list after successful delete\r\n// //         } else {\r\n// //           toast.error('Failed to delete project', {\r\n// //             position: 'top-right',\r\n// //             autoClose: 3000,\r\n// //             hideProgressBar: false,\r\n// //             closeOnClick: true,\r\n// //             pauseOnHover: true,\r\n// //             draggable: true,\r\n// //           });\r\n// //         }\r\n// //       } catch (error) {\r\n// //         console.error(error);\r\n// //         toast.error('Failed to delete project', {\r\n// //           position: 'top-right',\r\n// //           autoClose: 3000,\r\n// //           hideProgressBar: false,\r\n// //           closeOnClick: true,\r\n// //           pauseOnHover: true,\r\n// //           draggable: true,\r\n// //         });\r\n// //       }\r\n// //    // };\r\n    \r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"container\">\r\n// //       <h1>Projects</h1>\r\n// //       <div className=\"mb-3\">\r\n// //         <label htmlFor=\"leadSelect\" className=\"form-label\">Select Team Lead:</label>\r\n// //         <select className=\"form-select\" id=\"leadSelect\" value={selectedLead} onChange={handleSelectChange}>\r\n// //           <option value=\"\">-- Select Team Lead --</option>\r\n// //           {teamLeads.map((lead) => (\r\n// //             <option key={lead.id} value={lead.id}>{lead.name}</option>\r\n// //           ))}\r\n// //         </select>\r\n// //       </div>\r\n// //       <div className=\"mb-3\">\r\n// //         <label htmlFor=\"projectNameInput\" className=\"form-label\">Project Name:</label>\r\n// //         <input type=\"text\" className=\"form-control\" id=\"projectNameInput\" name=\"projectname\" value={newProject.projectname} onChange={handleInputChange} />\r\n// //       </div>\r\n// //       <div className=\"mb-3\">\r\n// //         <label htmlFor=\"developerNameInput\" className=\"form-label\">Developer Name:</label>\r\n// //         <input type=\"text\" className=\"form-control\" id=\"developerNameInput\" name=\"developername\" value={newProject.developername} onChange={handleInputChange} />\r\n// //       </div>\r\n// //       <button className=\"btn btn-primary\" onClick={createProject}>Add Project</button>\r\n\r\n// //       <h2>Projects List</h2>\r\n// //       {/* <table className=\"table\">\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>Project Name</th>\r\n// //             <th>Developer Name</th>\r\n// //             <th>Team Lead</th>\r\n// //             <th>Edit</th>\r\n// //             <th>Delete</th>\r\n// //           </tr>\r\n// //         </thead>\r\n// //         <tbody>\r\n// //           {projects.map((project) => (\r\n// //             <tr key={project.id}>\r\n// //               <td>{project.projectName}</td>\r\n// //               <td>{project.developerName}</td>\r\n// //               <td>{project.teamLead.name}</td>\r\n// //               <td>\r\n// //                 <button className=\"btn btn-sm btn-primary\" onClick={() => updateProject(project.id)}>Edit</button>\r\n// //               </td>\r\n// //               <td>\r\n// //                 <button className=\"btn btn-sm btn-danger\" onClick={() => deleteProject(project.id)}>Delete</button>\r\n// //               </td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table> */}\r\n// //       <table className=\"table\">\r\n// //         <thead>\r\n// //           <tr>\r\n// //             <th>Project Name</th>\r\n// //             <th>Developer Name</th>\r\n// //             <th>Team Lead</th>\r\n// //             <th>Actions</th>\r\n// //           </tr>\r\n// //         </thead>\r\n// //         <tbody>\r\n// //           {projects.map((project) => (\r\n// //             <tr key={project.id}>\r\n// //               <td>{project.projectname}</td>\r\n// //               <td>{project.developername}</td>\r\n// //               <td>\r\n// //               {/* {project.teamLead ? project.teamLead.name : 'N/A'} */}\r\n// //               {teamLeads.find((lead) => lead.id === project.teamLeadId)?.name || 'N/A'}\r\n// //               </td> //Use optional chaining to avoid undefined error\r\n// //               <td>\r\n// //                 <button className=\"btn btn-primary btn-sm\" onClick={() => updateProject(project.id)}>\r\n// //                   Edit\r\n// //                 </button>\r\n// //                 <button className=\"btn btn-danger btn-sm\" onClick={() => deleteProject(project.id)}>\r\n// //                   Delete\r\n// //                 </button>\r\n// //               </td>\r\n// //             </tr>\r\n// //           ))}\r\n// //         </tbody>\r\n// //       </table>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default Projects;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { toast } from 'react-toastify';\r\n\r\n// const Projects = () => {\r\n//   const [teamLeads, setTeamLeads] = useState([]);\r\n//   const [projects, setProjects] = useState([]);\r\n//   const [selectedProject, setSelectedProject] = useState('');\r\n//   const [updateProjectData, setUpdateProjectData] = useState({ projectname: '', developername: '' });\r\n\r\n//   const [selectedLead, setSelectedLead] = useState('');\r\n//   const [newProject, setNewProject] = useState({ projectname: '', developername: '' });\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [totalPages, setTotalPages] = useState(1);\r\n\r\n//   useEffect(() => {\r\n//     fetchTeamLeads();\r\n//     fetchProjects(currentPage);\r\n//   }, [currentPage]); // Fetch projects whenever the current page changes\r\n\r\n//   const fetchTeamLeads = async () => {\r\n//     try {\r\n//       axios.defaults.baseURL = 'http://localhost:5000';\r\n//       const response = await axios.get('/api/teamleads');\r\n//       setTeamLeads(response.data);\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchProjects = async (page) => {\r\n//     try {\r\n//       axios.defaults.baseURL = `http://localhost:5000`;\r\n//       const response = await axios.get(`/api/projects?page=${page}&itemsPerPage=10`);\r\n//       setProjects(response.data.projects);\r\n//       setTotalPages(response.data.totalPages);\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     setNewProject({ ...newProject, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleSelectChange = (e) => {\r\n//     setSelectedLead(e.target.value);\r\n//   };\r\n\r\n//   const createProject = async () => {\r\n//     try {\r\n//       const { projectname, developername } = newProject;\r\n//       axios.defaults.baseURL = 'http://localhost:5000';\r\n//       const response = await axios.post('/api/projects', { projectname, developername, teamleadname: selectedLead });\r\n//       fetchProjects(currentPage);\r\n//       setNewProject({ projectname: '', developername: '',teamLeadId: selectedLead });\r\n\r\n//       if (response.status === 201) {\r\n//         toast.success('Project added successfully', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//       } else {\r\n//         toast.error('Failed to add project', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       toast.error('Failed to add project', {\r\n//         position: 'top-right',\r\n//         autoClose: 3000,\r\n//         hideProgressBar: false,\r\n//         closeOnClick: true,\r\n//         pauseOnHover: true,\r\n//         draggable: true,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   // const updateProject = async (id) => {\r\n//   //   try {\r\n//   //     const projectToUpdate = projects.find((project) => project.id === id);\r\n//   //     if (!projectToUpdate) {\r\n//   //       toast.error('Project not found', {\r\n//   //         position: 'top-right',\r\n//   //         autoClose: 3000,\r\n//   //         hideProgressBar: false,\r\n//   //         closeOnClick: true,\r\n//   //         pauseOnHover: true,\r\n//   //         draggable: true,\r\n//   //       });\r\n//   //       return;\r\n//   //     }\r\n\r\n//   //     // Implement the logic to update the project here\r\n//   //     // const updatedProject = { ...projectToUpdate, projectname: 'Updated Project Name', developername: 'Updated Developer Name' };\r\n      \r\n//   //     axios.defaults.baseURL = 'http://localhost:5000';\r\n//   //     const response = await axios.put(`/api/projects/${id}`, updatedProject);\r\n//   //     if (response.status === 200) {\r\n//   //       toast.success('Project updated successfully', {\r\n//   //         position: 'top-right',\r\n//   //         autoClose: 3000,\r\n//   //         hideProgressBar: false,\r\n//   //         closeOnClick: true,\r\n//   //         pauseOnHover: true,\r\n//   //         draggable: true,\r\n//   //       });\r\n//   //       fetchProjects(currentPage); // Refresh the projects list after successful update\r\n//   //     } else {\r\n//   //       toast.error('Failed to update project', {\r\n//   //         position: 'top-right',\r\n//   //         autoClose: 3000,\r\n//   //         hideProgressBar: false,\r\n//   //         closeOnClick: true,\r\n//   //         pauseOnHover: true,\r\n//   //         draggable: true,\r\n//   //       });\r\n//   //     }\r\n//   //   } catch (error) {\r\n//   //     console.error(error);\r\n//   //     toast.error('Failed to update project', {\r\n//   //       position: 'top-right',\r\n//   //       autoClose: 3000,\r\n//   //       hideProgressBar: false,\r\n//   //       closeOnClick: true,\r\n//   //       pauseOnHover: true,\r\n//   //       draggable: true,\r\n//   //     });\r\n//   //   }\r\n//   // };\r\n\r\n//   const updateProject = async (id) => {\r\n//     try {\r\n//       const projectToUpdate = projects.find((project) => project.id === id);\r\n//       if (!projectToUpdate) {\r\n//         toast.error('Project not found', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//         return;\r\n//       }\r\n\r\n//       // Set the updateProjectData state with the properties of the project to be updated\r\n//       setUpdateProjectData({\r\n//         projectname: projectToUpdate.projectname,\r\n//         developername: projectToUpdate.developername,\r\n//       });\r\n\r\n//       // Implement the logic to update the project here\r\n//       axios.defaults.baseURL = 'http://localhost:5000';\r\n//       const response = await axios.put(`/api/projects/${id}`, updateProjectData);\r\n\r\n//       if (response.status === 200) {\r\n//         toast.success('Project updated successfully', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//         fetchProjects(currentPage); // Refresh the projects list after successful update\r\n//       } else {\r\n//         toast.error('Failed to update project', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       toast.error('Failed to update project', {\r\n//         position: 'top-right',\r\n//         autoClose: 3000,\r\n//         hideProgressBar: false,\r\n//         closeOnClick: true,\r\n//         pauseOnHover: true,\r\n//         draggable: true,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const getProjectById = async () => {\r\n//     try {\r\n//       const response = await axios.get(`/api/projects/${selectedProject}`);\r\n//       console.log(response.data); // Log the project data fetched by ID\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const deleteProject = async (id) => {\r\n//     try {\r\n//       // Implement the logic to delete the project here\r\n//       axios.defaults.baseURL = 'http://localhost:5000';\r\n//       const response = await axios.delete(`/api/projects/${id}`);\r\n//       if (response.status === 200) {\r\n//         toast.success('Project deleted successfully', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//         fetchProjects(currentPage); // Refresh the projects list after successful delete\r\n//       } else {\r\n//         toast.error('Failed to delete project', {\r\n//           position: 'top-right',\r\n//           autoClose: 3000,\r\n//           hideProgressBar: false,\r\n//           closeOnClick: true,\r\n//           pauseOnHover: true,\r\n//           draggable: true,\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       toast.error('Failed to delete project', {\r\n//         position: 'top-right',\r\n//         autoClose: 3000,\r\n//         hideProgressBar: false,\r\n//         closeOnClick: true,\r\n//         pauseOnHover: true,\r\n//         draggable: true,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const handlePrevPage = () => {\r\n//     if (currentPage > 1) {\r\n//       setCurrentPage((prevPage) => prevPage - 1);\r\n//     }\r\n//   };\r\n\r\n//   const handleNextPage = () => {\r\n//     if (currentPage < totalPages) {\r\n//       setCurrentPage((prevPage) => prevPage + 1);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h1>Projects</h1>\r\n//       <div className=\"mb-3\">\r\n//         <label htmlFor=\"leadSelect\" className=\"form-label\">Select Team Lead:</label>\r\n//         <select className=\"form-select\" id=\"leadSelect\" value={selectedLead} onChange={handleSelectChange}>\r\n//           <option value=\"\">-- Select Team Lead --</option>\r\n//           {teamLeads.map((lead) => (\r\n//             <option key={lead.id} value={lead.id}>{lead.name}</option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n//       <div className=\"mb-3\">\r\n//         <label htmlFor=\"projectNameInput\" className=\"form-label\">Project Name:</label>\r\n//         <input type=\"text\" className=\"form-control\" id=\"projectNameInput\" name=\"projectname\" value={newProject.projectname} onChange={handleInputChange} />\r\n//       </div>\r\n//       <div className=\"mb-3\">\r\n//         <label htmlFor=\"developerNameInput\" className=\"form-label\">Developer Name:</label>\r\n//         <input type=\"text\" className=\"form-control\" id=\"developerNameInput\" name=\"developername\" value={newProject.developername} onChange={handleInputChange} />\r\n//       </div>\r\n//       <button className=\"btn btn-primary\" onClick={createProject}>Add Project</button>\r\n\r\n//       <h2>Projects List</h2>\r\n//       <table className=\"table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Project Name</th>\r\n//             <th>Developer Name</th>\r\n//             <th>Team Lead</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {projects.map((project) => (\r\n//             <tr key={project.id}>\r\n//               <td>{project.projectname}</td>\r\n//               <td>{project.developername}</td>\r\n//               <td>\r\n              \r\n//               {/* {project.teamleadname|| 'N/A'} */}\r\n//               <td>{project.teamLeadName || 'N/A'}</td> {/* Display team lead name instead of ID */}\r\n              \r\n//               </td> {/* Use optional chaining to avoid undefined error */}\r\n//               <td>\r\n//                 <button className=\"btn btn-primary btn-sm\" onClick={() => updateProject(project.id)}>\r\n//                   Edit\r\n//                 </button>\r\n//                 <button className=\"btn btn-danger btn-sm\" onClick={() => deleteProject(project.id)}>\r\n//                   Delete\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       <div className=\"pagination\">\r\n//         <button className=\"btn btn-primary\" onClick={handlePrevPage} disabled={currentPage === 1}>\r\n//           Prev\r\n//         </button>\r\n//         <span>Page {currentPage} of {totalPages}</span>\r\n//         <button className=\"btn btn-primary\" onClick={handleNextPage} disabled={currentPage === totalPages}>\r\n//           Next\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Projects;\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Projects = () => {\r\n  const [teamLeads, setTeamLeads] = useState([]);\r\n  const [projects, setProjects] = useState([]);\r\n  const [selectedProject, setSelectedProject] = useState('');\r\n  const [updateProjectData, setUpdateProjectData] = useState({\r\n    projectname: '',\r\n    developername: '',\r\n    teamLeadId: '',\r\n  });\r\n\r\n  const [selectedLead, setSelectedLead] = useState('');\r\n  const [newProject, setNewProject] = useState({\r\n    projectname: '',\r\n    developername: '',\r\n    teamLeadId: '',\r\n  });\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n\r\n  useEffect(() => {\r\n    fetchTeamLeads();\r\n    fetchProjects(currentPage);\r\n  }, [currentPage]);\r\n\r\n  const fetchTeamLeads = async () => {\r\n    try {\r\n      // Simulating API call for team leads\r\n      const dummyTeamLeads = [\r\n        { id: '1', name: 'John Doe' },\r\n        { id: '2', name: 'Jane Smith' },\r\n        { id: '3', name: 'Michael Johnson' },\r\n      ];\r\n      setTeamLeads(dummyTeamLeads);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const fetchProjects = async (page) => {\r\n    try {\r\n      // Simulating API call for projects\r\n      const dummyProjects = [\r\n        {\r\n          id: '1',\r\n          projectname: 'Project A',\r\n          developername: 'Dev A',\r\n          teamLeadId: '1',\r\n          teamLeadName: 'John Doe',\r\n        },\r\n        {\r\n          id: '2',\r\n          projectname: 'Project B',\r\n          developername: 'Dev B',\r\n          teamLeadId: '2',\r\n          teamLeadName: 'Jane Smith',\r\n        },\r\n        {\r\n          id: '3',\r\n          projectname: 'Project C',\r\n          developername: 'Dev C',\r\n          teamLeadId: '3',\r\n          teamLeadName: 'Michael Johnson',\r\n        },\r\n      ];\r\n      setProjects(dummyProjects);\r\n      setTotalPages(1); // Dummy value for simplicity\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewProject({ ...newProject, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSelectChange = (e) => {\r\n    setSelectedLead(e.target.value);\r\n  };\r\n\r\n  const createProject = async () => {\r\n    try {\r\n      // Simulating API call to add a project\r\n      const newProjectData = { ...newProject, teamLeadId: selectedLead };\r\n      setProjects([...projects, newProjectData]);\r\n      setNewProject({ projectname: '', developername: '', teamLeadId: '' });\r\n      setSelectedLead('');\r\n\r\n      toast.success('Project added successfully');\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error('Failed to add project');\r\n    }\r\n  };\r\n\r\n  const updateProject = async (id) => {\r\n    try {\r\n      // Simulating API call to update a project\r\n      const updatedProjects = projects.map((project) =>\r\n        project.id === id ? { ...project, ...updateProjectData } : project\r\n      );\r\n      setProjects(updatedProjects);\r\n      setUpdateProjectData({\r\n        projectname: '',\r\n        developername: '',\r\n        teamLeadId: '',\r\n      });\r\n\r\n      toast.success('Project updated successfully');\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error('Failed to update project');\r\n    }\r\n  };\r\n\r\n  const deleteProject = async (id) => {\r\n    try {\r\n      // Simulating API call to delete a project\r\n      const filteredProjects = projects.filter((project) => project.id !== id);\r\n      setProjects(filteredProjects);\r\n\r\n      toast.success('Project deleted successfully');\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error('Failed to delete project');\r\n    }\r\n  };\r\n\r\n  const handlePrevPage = () => {\r\n    if (currentPage > 1) {\r\n      setCurrentPage((prevPage) => prevPage - 1);\r\n    }\r\n  };\r\n\r\n  const handleNextPage = () => {\r\n    if (currentPage < totalPages) {\r\n      setCurrentPage((prevPage) => prevPage + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Projects</h1>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"leadSelect\" className=\"form-label\">\r\n          Select Team Lead:\r\n        </label>\r\n        <select\r\n          className=\"form-select\"\r\n          id=\"leadSelect\"\r\n          value={selectedLead}\r\n          onChange={handleSelectChange}\r\n        >\r\n          <option value=\"\">-- Select Team Lead --</option>\r\n          {teamLeads.map((lead) => (\r\n            <option key={lead.id} value={lead.id}>\r\n              {lead.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"projectNameInput\" className=\"form-label\">\r\n          Project Name:\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          id=\"projectNameInput\"\r\n          name=\"projectname\"\r\n          value={newProject.projectname}\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"developerNameInput\" className=\"form-label\">\r\n          Developer Name:\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          id=\"developerNameInput\"\r\n          name=\"developername\"\r\n          value={newProject.developername}\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n      <button className=\"btn btn-primary\" onClick={createProject}>\r\n        Add Project\r\n      </button>\r\n\r\n      <h2>Projects List</h2>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Project Name</th>\r\n            <th>Developer Name</th>\r\n            <th>Team Lead</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {projects.map((project) => (\r\n            <tr key={project.id}>\r\n              <td>{project.projectname}</td>\r\n              <td>{project.developername}</td>\r\n              <td>{project.teamLeadName || 'N/A'}</td>\r\n              <td>\r\n                <button\r\n                  className=\"btn btn-primary btn-sm\"\r\n                  onClick={() => {\r\n                    setSelectedProject(project.id);\r\n                    setUpdateProjectData({\r\n                      projectname: project.projectname,\r\n                      developername: project.developername,\r\n                      teamLeadId: project.teamLeadId,\r\n                    });\r\n                  }}\r\n                  data-bs-toggle=\"modal\"\r\n                  data-bs-target=\"#editModal\"\r\n                >\r\n                  Edit\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-danger btn-sm\"\r\n                  onClick={() => deleteProject(project.id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"pagination\">\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          onClick={handlePrevPage}\r\n          disabled={currentPage === 1}\r\n        >\r\n          Previous Page\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          onClick={handleNextPage}\r\n          disabled={currentPage === totalPages}\r\n        >\r\n          Next Page\r\n        </button>\r\n      </div>\r\n\r\n      {/* Edit Project Modal */}\r\n      <div\r\n        className=\"modal fade\"\r\n        id=\"editModal\"\r\n        tabIndex=\"-1\"\r\n        aria-labelledby=\"editModalLabel\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <div className=\"modal-dialog modal-dialog-centered\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title\" id=\"editModalLabel\">\r\n                Edit Project\r\n              </h5>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-close\"\r\n                data-bs-dismiss=\"modal\"\r\n                aria-label=\"Close\"\r\n              ></button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <div className=\"mb-3\">\r\n                <label htmlFor=\"editProjectNameInput\" className=\"form-label\">\r\n                  Project Name:\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"editProjectNameInput\"\r\n                  name=\"projectname\"\r\n                  value={updateProjectData.projectname}\r\n                  onChange={(e) =>\r\n                    setUpdateProjectData({\r\n                      ...updateProjectData,\r\n                      projectname: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <label htmlFor=\"editDeveloperNameInput\" className=\"form-label\">\r\n                  Developer Name:\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"editDeveloperNameInput\"\r\n                  name=\"developername\"\r\n                  value={updateProjectData.developername}\r\n                  onChange={(e) =>\r\n                    setUpdateProjectData({\r\n                      ...updateProjectData,\r\n                      developername: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <label htmlFor=\"editLeadSelect\" className=\"form-label\">\r\n                  Select Team Lead:\r\n                </label>\r\n                <select\r\n                  className=\"form-select\"\r\n                  id=\"editLeadSelect\"\r\n                  name=\"teamLeadId\"\r\n                  value={updateProjectData.teamLeadId}\r\n                  onChange={(e) =>\r\n                    setUpdateProjectData({\r\n                      ...updateProjectData,\r\n                      teamLeadId: e.target.value,\r\n                    })\r\n                  }\r\n                >\r\n                  <option value=\"\">-- Select Team Lead --</option>\r\n                  {teamLeads.map((lead) => (\r\n                    <option key={lead.id} value={lead.id}>\r\n                      {lead.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-bs-dismiss=\"modal\"\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                onClick={() => updateProject(selectedProject)}\r\n                data-bs-dismiss=\"modal\"\r\n              >\r\n                Save Changes\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}